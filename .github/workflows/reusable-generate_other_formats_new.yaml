name: Reusable workflow for generating other formats

on:
  workflow_call:
    inputs:
      model_name:
        description: 'A name of the model(s), without the .yaml extension. Models should be separated by a comma.'
        required: true
        type: string
      linkml_version:
        description: 'linkml version to test (optional, by default it uses one from the pyproject.toml)'
        required: false
        type: string

permissions:
  contents: write

jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install the required python packages
        run: python -m pip install .[test]

      - name: Updating linkml if requested
        if: ${{ inputs.linkml_version != null }}
        run: |
          pip install linkml==${{ inputs.linkml_version }}
          echo "linkml version: ${{ inputs.linkml_version }} has been installed"

      - name: Other installations
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential git wget curl

      - name: Generate other model representations
        run: |
          cd linkml-schema
          models_list="${{ inputs.model_name }}"
          echo "Model list: $model_list"
          for name in $(echo "$model_list" | tr ',' '\n'); do
            echo "Processing $name model...";
            linkml generate json-schema ${name}.yaml > ../json-schema-autogen/${name}.json;
            # generating jsonld context and removing generation_date field to avoid constant updates
            linkml generate jsonld-context ${name}.yaml > ../jsonld-context-autogen/${name}.context.jsonld;
            sed -i "/generation_date/d" ../jsonld-context-autogen/${name}.context.jsonld;
            linkml generate pydantic ${name}.yaml > ../models_py-autogen/${name}.py;
            linkml generate owl ${name}.yaml > ../owl-autogen/${name}.owl;
            if [ ${name} = "library_generation" ] || [ ${name} = "genome_annotation" ]; then
              echo "Fixing erdiagrams for $name";
              python ../utils/fix_and_create_erdiagram.py;
            else
              linkml generate erdiagram ${name}.yaml > ../erdiagram-autogen/${name}.md;
            fi
          done
          cd ..

      - name: Adding other model representations to git
        run: |
          git config --global user.name "action@github.com"
          git config --global user.email "Github Actions"
          git branch
          git diff
          models_list="${{ inputs.model_name }}"
          echo "Model list: $model_list"
          for name in $(echo "$model_list" | tr ',' '\n'); do
            echo "Processing: $name"
            git add json-schema-autogen/${name}.json
            git add owl-autogen/${name}.owl
            git add jsonld-context-autogen/${name}.context.jsonld
            git add models_py-autogen/${name}.py
            git add erdiagram-autogen/${name}.md
          done
          if ! git diff --quiet HEAD; then
            git commit -m "generate another formats for ${model_list} model(s)"
            git pull --rebase # to avoid conflicts with different wf runs
            git push
          else
            echo "No changes to commit"
          fi