name: Reusable workflow for generating other formats

on:
  workflow_call:
    inputs:
      model_name:
        description: 'A name of the model(s), without the .yaml extension. Models should be separated by a comma.'
        required: true
        type: string
      linkml_version:
        description: 'linkml version to test (optional, by default it uses one from the pyproject.toml)'
        required: false
        type: string
      branch_name:
        description: 'Branch name to be used for the commit'
        required: false
        type: string


permissions:
  contents: write
  pull-requests: write

jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install the required python packages
        run: python -m pip install .[test]

      - name: Updating linkml if requested
        if: ${{ inputs.linkml_version != null }}
        run: |
          pip install linkml==${{ inputs.linkml_version }}
          echo "linkml version: ${{ inputs.linkml_version }} has been installed"

      - name: Other installations
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential git wget curl

      - name: Generate other model representations
        run: |
          cd linkml-schema
          models_list="${{ inputs.model_name }}"
          echo " "
          echo "Model list: $models_list"
          for name in $(echo "$models_list" | tr ',' '\n'); do
            echo "Processing $name model...";
            linkml generate json-schema ${name}.yaml > ../json-schema-autogen/${name}.json;
            echo "json-schema generated";
            # generating jsonld context and removing generation_date field to avoid constant updates
            linkml generate jsonld-context ${name}.yaml > ../jsonld-context-autogen/${name}.context.jsonld;
            sed -i "/generation_date/d" ../jsonld-context-autogen/${name}.context.jsonld;
            python ../utils/modify_jsonldcontext.py ../jsonld-context-autogen/${name}.context.jsonld;
            echo "jsonld-context generated";
            linkml generate pydantic ${name}.yaml > ../models_py-autogen/${name}.py;
            echo "pydantic model generated";
            if [ ${name} = "library_generation" ] || [ ${name} = "genome_annotation" ] || [ ${name} = "bke_taxonomy" ] || [ ${name} = "anatomical_structure" ]; then
              echo "Fixing erdiagrams for $name";
              python ../utils/fix_and_create_erdiagram.py;
            else
              linkml generate erdiagram ${name}.yaml > ../erdiagram-autogen/${name}.md;
            fi
            echo "erdiagram generated";
          done
          cd ..

      - name: Adding other model representations to git
        env:
          BRANCH_NAME: ${{ inputs.branch_name }}
        run: |
          git config --global user.name "action@github.com"
          git config --global user.email "Github Actions"     
          if [ -n "$BRANCH_NAME" ]; then
            echo "Branch Name from Input: $BRANCH_NAME"
            # Define a unique branch name
            git checkout -b $BRANCH_NAME
          fi
          echo "Current branch: $(git branch)"
          models_list="${{ inputs.model_name }}"
          echo "Model list: $models_list"
          for name in $(echo "$models_list" | tr ',' '\n'); do
            echo "Processing: $name"
            git add json-schema-autogen/${name}.json
            git add jsonld-context-autogen/${name}.context.jsonld
            git add models_py-autogen/${name}.py
            git add erdiagram-autogen/${name}.md
          done
          if ! git diff --cached --quiet; then
            git commit -m "generate another formats for ${models_list} model(s)"
            if git pull --rebase; then
              git push
            else
              echo "Failed to pull --rebase, setting upstream"
              git push --set-upstream origin $BRANCH_NAME
            fi
          else
            echo "No changes to commit"
          fi
