from __future__ import annotations 
from datetime import (
    datetime,
    date
)
from decimal import Decimal 
from enum import Enum 
import re
import sys
from typing import (
    Any,
    ClassVar,
    List,
    Literal,
    Dict,
    Optional,
    Union
)
from pydantic.version import VERSION  as PYDANTIC_VERSION 
if int(PYDANTIC_VERSION[0])>=2:
    from pydantic import (
        BaseModel,
        ConfigDict,
        Field,
        RootModel,
        field_validator
    )
else:
    from pydantic import (
        BaseModel,
        Field,
        validator
    )

metamodel_version = "None"
version = "None"


class ConfiguredBaseModel(BaseModel):
    model_config = ConfigDict(
        validate_assignment = True,
        validate_default = True,
        extra = "forbid",
        arbitrary_types_allowed = True,
        use_enum_values = True,
        strict = False,
    )
    pass




class LinkMLMeta(RootModel):
    root: Dict[str, Any] = {}
    model_config = ConfigDict(frozen=True)

    def __getattr__(self, key:str):
        return getattr(self.root, key)

    def __getitem__(self, key:str):
        return self.root[key]

    def __setitem__(self, key:str, value):
        self.root[key] = value

    def __contains__(self, key:str) -> bool:
        return key in self.root


linkml_meta = LinkMLMeta({'default_prefix': 'bican',
     'default_range': 'string',
     'description': 'The Genome Annotation schema is designed to represent types '
                    "and relationships of an organism's annotated genome.",
     'id': 'https://identifiers.org/brain-bican/genome-annotation-schema',
     'imports': ['linkml:types', 'bican_biolink', 'bican_core'],
     'name': 'genome-annotation-schema',
     'prefixes': {'NCBIAssembly': {'prefix_prefix': 'NCBIAssembly',
                                   'prefix_reference': 'https://www.ncbi.nlm.nih.gov/assembly/'},
                  'bican': {'prefix_prefix': 'bican',
                            'prefix_reference': 'https://identifiers.org/brain-bican/vocab/'},
                  'linkml': {'prefix_prefix': 'linkml',
                             'prefix_reference': 'https://w3id.org/linkml/'},
                  'ncbi': {'prefix_prefix': 'ncbi',
                           'prefix_reference': 'https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=Info&id='},
                  'schema': {'prefix_prefix': 'schema',
                             'prefix_reference': 'http://schema.org/'}},
     'source_file': 'genome_annotation.yaml',
     'title': 'Genome Annotation Schema'} )

class DigestType(str, Enum):
    SHA1 = "spdx:checksumAlgorithm_sha1"
    MD5 = "spdx:checksumAlgorithm_md5"
    SHA256 = "spdx:checksumAlgorithm_sha256"


class BioType(str, Enum):
    protein_coding = "protein_coding"
    noncoding = "noncoding"


class AuthorityType(str, Enum):
    ENSEMBL = "ENSEMBL"
    NCBI = "NCBI"



class OntologyClass(ConfiguredBaseModel):
    """
    a concept or class in an ontology, vocabulary or thesaurus. Note that nodes in a biolink compatible KG can be considered both instances of biolink classes, and OWL classes in their own right. In general you should not need to use this class directly. Instead, use the appropriate biolink class. For example, for the GO concept of endocytosis (GO:0006897), use bl:BiologicalProcess as the type.
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'class_uri': 'biolink:OntologyClass',
         'comments': ["This is modeled as a mixin. 'ontology class' should not be the "
                      'primary type of a node in the KG. Instead you should use an '
                      'informative bioloink category, such as AnatomicalEntity (for '
                      'Uberon classes), ChemicalSubstance (for CHEBI or CHEMBL), etc',
                      'Note that formally this is a metaclass. Instances of this class '
                      "are instances in the graph, but can be the object of 'type' "
                      'edges. For example, if we had a node in the graph representing '
                      'a specific brain of a specific patient (e.g brain001), this '
                      'could have a category of bl:Sample, and by typed more '
                      'specifically with an ontology class UBERON:nnn, which has as '
                      'category bl:AnatomicalEntity'],
         'definition_uri': 'https://w3id.org/biolink/vocab/OntologyClass',
         'exact_mappings': ['owl:Class', 'schema:Class'],
         'examples': [{'description': "the class 'brain' from the Uberon anatomy "
                                      'ontology',
                       'value': 'UBERON:0000955'}],
         'from_schema': 'https://w3id.org/biolink/bican-biolink-schema',
         'id_prefixes': ['MESH', 'UMLS', 'KEGG.BRITE'],
         'mixin': True,
         'see_also': ['https://github.com/biolink/biolink-model/issues/486']})

    id: str = Field(..., description="""A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI""", json_schema_extra = { "linkml_meta": {'alias': 'id',
         'definition_uri': 'https://w3id.org/biolink/vocab/id',
         'domain': 'entity',
         'domain_of': ['ontology class',
                       'entity',
                       'attribute',
                       'named thing',
                       'taxonomic rank',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['AGRKB:primaryId', 'gff3:ID', 'gpi:DB_Object_ID'],
         'in_subset': ['translator_minimal'],
         'slot_uri': 'biolink:id'} })


class Annotation(ConfiguredBaseModel):
    """
    Biolink Model root class for entity annotations.
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'abstract': True,
         'class_uri': 'biolink:Annotation',
         'definition_uri': 'https://w3id.org/biolink/vocab/Annotation',
         'from_schema': 'https://w3id.org/biolink/bican-biolink-schema'})

    pass


class QuantityValue(Annotation):
    """
    A value of an attribute that is quantitative and measurable, expressed as a combination of a unit and a numeric value
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'class_uri': 'biolink:QuantityValue',
         'definition_uri': 'https://w3id.org/biolink/vocab/QuantityValue',
         'from_schema': 'https://w3id.org/biolink/bican-biolink-schema'})

    has_unit: Optional[str] = Field(None, description="""connects a quantity value to a unit""", json_schema_extra = { "linkml_meta": {'alias': 'has_unit',
         'close_mappings': ['EFO:0001697', 'UO-PROPERTY:is_unit_of'],
         'definition_uri': 'https://w3id.org/biolink/vocab/has_unit',
         'domain': 'quantity value',
         'domain_of': ['quantity value'],
         'exact_mappings': ['qud:unit', 'IAO:0000039'],
         'in_subset': ['samples'],
         'narrow_mappings': ['SNOMED:has_concentration_strength_denominator_unit',
                             'SNOMED:has_concentration_strength_numerator_unit',
                             'SNOMED:has_presentation_strength_denominator_unit',
                             'SNOMED:has_presentation_strength_numerator_unit',
                             'SNOMED:has_unit_of_presentation'],
         'slot_uri': 'biolink:has_unit'} })
    has_numeric_value: Optional[float] = Field(None, description="""connects a quantity value to a number""", json_schema_extra = { "linkml_meta": {'alias': 'has_numeric_value',
         'definition_uri': 'https://w3id.org/biolink/vocab/has_numeric_value',
         'domain': 'quantity value',
         'domain_of': ['quantity value'],
         'exact_mappings': ['qud:quantityValue'],
         'in_subset': ['samples'],
         'slot_uri': 'biolink:has_numeric_value'} })


class Entity(ConfiguredBaseModel):
    """
    Root Biolink Model class for all things and informational relationships, real or imagined.
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'abstract': True,
         'class_uri': 'biolink:Entity',
         'definition_uri': 'https://w3id.org/biolink/vocab/Entity',
         'from_schema': 'https://w3id.org/biolink/bican-biolink-schema'})

    id: str = Field(..., description="""A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI""", json_schema_extra = { "linkml_meta": {'alias': 'id',
         'definition_uri': 'https://w3id.org/biolink/vocab/id',
         'domain': 'entity',
         'domain_of': ['ontology class',
                       'entity',
                       'attribute',
                       'named thing',
                       'taxonomic rank',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['AGRKB:primaryId', 'gff3:ID', 'gpi:DB_Object_ID'],
         'in_subset': ['translator_minimal'],
         'slot_uri': 'biolink:id'} })
    iri: Optional[str] = Field(None, description="""An IRI for an entity. This is determined by the id using expansion rules.""", json_schema_extra = { "linkml_meta": {'alias': 'iri',
         'definition_uri': 'https://w3id.org/biolink/vocab/iri',
         'domain_of': ['attribute',
                       'entity',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['WIKIDATA_PROPERTY:P854'],
         'in_subset': ['translator_minimal', 'samples'],
         'slot_uri': 'biolink:iri'} })
    category: List[Literal["https://w3id.org/biolink/vocab/Entity","biolink:Entity"]] = Field(["biolink:Entity"], description="""Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}. NOTE: The category slot was modified to have a curie range and a pattern for bican categories.""", json_schema_extra = { "linkml_meta": {'alias': 'category',
         'definition_uri': 'https://w3id.org/biolink/vocab/category',
         'designates_type': True,
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'is_a': 'type',
         'is_class_field': True,
         'slot_uri': 'biolink:category'} })
    type: Optional[List[str]] = Field(default_factory=list, json_schema_extra = { "linkml_meta": {'alias': 'type',
         'definition_uri': 'https://w3id.org/biolink/vocab/type',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:type', 'gpi:DB_Object_Type'],
         'mappings': ['rdf:type'],
         'slot_uri': 'rdf:type'} })
    name: Optional[str] = Field(None, description="""A human-readable name for an attribute or entity.""", json_schema_extra = { "linkml_meta": {'alias': 'name',
         'aliases': ['label', 'display name', 'title'],
         'definition_uri': 'https://w3id.org/biolink/vocab/name',
         'domain': 'entity',
         'domain_of': ['attribute',
                       'entity',
                       'macromolecular machine mixin',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene or gene product',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:Name', 'gpi:DB_Object_Name'],
         'in_subset': ['translator_minimal', 'samples'],
         'mappings': ['rdfs:label'],
         'narrow_mappings': ['dct:title', 'WIKIDATA_PROPERTY:P1476'],
         'slot_uri': 'rdfs:label'} })
    description: Optional[str] = Field(None, description="""a human-readable description of an entity""", json_schema_extra = { "linkml_meta": {'alias': 'description',
         'aliases': ['definition'],
         'definition_uri': 'https://w3id.org/biolink/vocab/description',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['IAO:0000115', 'skos:definitions'],
         'in_subset': ['translator_minimal'],
         'mappings': ['dct:description'],
         'narrow_mappings': ['gff3:Description'],
         'slot_uri': 'dct:description'} })
    has_attribute: Optional[List[str]] = Field(None, description="""connects any entity to an attribute""", json_schema_extra = { "linkml_meta": {'alias': 'has_attribute',
         'close_mappings': ['OBI:0001927'],
         'definition_uri': 'https://w3id.org/biolink/vocab/has_attribute',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['SIO:000008'],
         'in_subset': ['samples'],
         'narrow_mappings': ['OBAN:association_has_subject_property',
                             'OBAN:association_has_object_property',
                             'CPT:has_possibly_included_panel_element',
                             'DRUGBANK:category',
                             'EFO:is_executed_in',
                             'HANCESTRO:0301',
                             'LOINC:has_action_guidance',
                             'LOINC:has_adjustment',
                             'LOINC:has_aggregation_view',
                             'LOINC:has_approach_guidance',
                             'LOINC:has_divisor',
                             'LOINC:has_exam',
                             'LOINC:has_method',
                             'LOINC:has_modality_subtype',
                             'LOINC:has_object_guidance',
                             'LOINC:has_scale',
                             'LOINC:has_suffix',
                             'LOINC:has_time_aspect',
                             'LOINC:has_time_modifier',
                             'LOINC:has_timing_of',
                             'NCIT:R88',
                             'NCIT:eo_disease_has_property_or_attribute',
                             'NCIT:has_data_element',
                             'NCIT:has_pharmaceutical_administration_method',
                             'NCIT:has_pharmaceutical_basic_dose_form',
                             'NCIT:has_pharmaceutical_intended_site',
                             'NCIT:has_pharmaceutical_release_characteristics',
                             'NCIT:has_pharmaceutical_state_of_matter',
                             'NCIT:has_pharmaceutical_transformation',
                             'NCIT:is_qualified_by',
                             'NCIT:qualifier_applies_to',
                             'NCIT:role_has_domain',
                             'NCIT:role_has_range',
                             'INO:0000154',
                             'HANCESTRO:0308',
                             'OMIM:has_inheritance_type',
                             'orphanet:C016',
                             'orphanet:C017',
                             'RO:0000053',
                             'RO:0000086',
                             'RO:0000087',
                             'SNOMED:has_access',
                             'SNOMED:has_clinical_course',
                             'SNOMED:has_count_of_base_of_active_ingredient',
                             'SNOMED:has_dose_form_administration_method',
                             'SNOMED:has_dose_form_release_characteristic',
                             'SNOMED:has_dose_form_transformation',
                             'SNOMED:has_finding_context',
                             'SNOMED:has_finding_informer',
                             'SNOMED:has_inherent_attribute',
                             'SNOMED:has_intent',
                             'SNOMED:has_interpretation',
                             'SNOMED:has_laterality',
                             'SNOMED:has_measurement_method',
                             'SNOMED:has_method',
                             'SNOMED:has_priority',
                             'SNOMED:has_procedure_context',
                             'SNOMED:has_process_duration',
                             'SNOMED:has_property',
                             'SNOMED:has_revision_status',
                             'SNOMED:has_scale_type',
                             'SNOMED:has_severity',
                             'SNOMED:has_specimen',
                             'SNOMED:has_state_of_matter',
                             'SNOMED:has_subject_relationship_context',
                             'SNOMED:has_surgical_approach',
                             'SNOMED:has_technique',
                             'SNOMED:has_temporal_context',
                             'SNOMED:has_time_aspect',
                             'SNOMED:has_units',
                             'UMLS:has_structural_class',
                             'UMLS:has_supported_concept_property',
                             'UMLS:has_supported_concept_relationship',
                             'UMLS:may_be_qualified_by'],
         'slot_uri': 'biolink:has_attribute'} })
    deprecated: Optional[bool] = Field(None, description="""A boolean flag indicating that an entity is no longer considered current or valid.""", json_schema_extra = { "linkml_meta": {'alias': 'deprecated',
         'definition_uri': 'https://w3id.org/biolink/vocab/deprecated',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['oboInOwl:ObsoleteClass'],
         'slot_uri': 'biolink:deprecated'} })

    @field_validator('category')
    def pattern_category(cls, v):
        pattern=re.compile(r"^bican:[A-Z][A-Za-z]+$")
        if isinstance(v,list):
            for element in v:
                if not pattern.match(element):
                    raise ValueError(f"Invalid category format: {element}")
        elif isinstance(v,str):
            if not pattern.match(v):
                raise ValueError(f"Invalid category format: {v}")
        return v


class NamedThing(Entity):
    """
    a databased entity or concept/class
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'class_uri': 'biolink:NamedThing',
         'definition_uri': 'https://w3id.org/biolink/vocab/NamedThing',
         'exact_mappings': ['BFO:0000001',
                            'WIKIDATA:Q35120',
                            'UMLSSG:OBJC',
                            'STY:T071',
                            'dcid:Thing'],
         'from_schema': 'https://w3id.org/biolink/bican-biolink-schema'})

    id: str = Field(..., description="""A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI""", json_schema_extra = { "linkml_meta": {'alias': 'id',
         'definition_uri': 'https://w3id.org/biolink/vocab/id',
         'domain': 'entity',
         'domain_of': ['ontology class',
                       'entity',
                       'attribute',
                       'named thing',
                       'taxonomic rank',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['AGRKB:primaryId', 'gff3:ID', 'gpi:DB_Object_ID'],
         'in_subset': ['translator_minimal'],
         'slot_uri': 'biolink:id'} })
    iri: Optional[str] = Field(None, description="""An IRI for an entity. This is determined by the id using expansion rules.""", json_schema_extra = { "linkml_meta": {'alias': 'iri',
         'definition_uri': 'https://w3id.org/biolink/vocab/iri',
         'domain_of': ['attribute',
                       'entity',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['WIKIDATA_PROPERTY:P854'],
         'in_subset': ['translator_minimal', 'samples'],
         'slot_uri': 'biolink:iri'} })
    category: List[Literal["https://w3id.org/biolink/vocab/NamedThing","biolink:NamedThing"]] = Field(["biolink:NamedThing"], description="""Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}. NOTE: The category slot was modified to have a curie range and a pattern for bican categories.""", json_schema_extra = { "linkml_meta": {'alias': 'category',
         'definition_uri': 'https://w3id.org/biolink/vocab/category',
         'designates_type': True,
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'is_a': 'type',
         'is_class_field': True,
         'slot_uri': 'biolink:category'} })
    type: Optional[List[str]] = Field(default_factory=list, json_schema_extra = { "linkml_meta": {'alias': 'type',
         'definition_uri': 'https://w3id.org/biolink/vocab/type',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:type', 'gpi:DB_Object_Type'],
         'mappings': ['rdf:type'],
         'slot_uri': 'rdf:type'} })
    name: Optional[str] = Field(None, description="""A human-readable name for an attribute or entity.""", json_schema_extra = { "linkml_meta": {'alias': 'name',
         'aliases': ['label', 'display name', 'title'],
         'definition_uri': 'https://w3id.org/biolink/vocab/name',
         'domain': 'entity',
         'domain_of': ['attribute',
                       'entity',
                       'macromolecular machine mixin',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene or gene product',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:Name', 'gpi:DB_Object_Name'],
         'in_subset': ['translator_minimal', 'samples'],
         'mappings': ['rdfs:label'],
         'narrow_mappings': ['dct:title', 'WIKIDATA_PROPERTY:P1476'],
         'slot_uri': 'rdfs:label'} })
    description: Optional[str] = Field(None, description="""a human-readable description of an entity""", json_schema_extra = { "linkml_meta": {'alias': 'description',
         'aliases': ['definition'],
         'definition_uri': 'https://w3id.org/biolink/vocab/description',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['IAO:0000115', 'skos:definitions'],
         'in_subset': ['translator_minimal'],
         'mappings': ['dct:description'],
         'narrow_mappings': ['gff3:Description'],
         'slot_uri': 'dct:description'} })
    has_attribute: Optional[List[str]] = Field(None, description="""connects any entity to an attribute""", json_schema_extra = { "linkml_meta": {'alias': 'has_attribute',
         'close_mappings': ['OBI:0001927'],
         'definition_uri': 'https://w3id.org/biolink/vocab/has_attribute',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['SIO:000008'],
         'in_subset': ['samples'],
         'narrow_mappings': ['OBAN:association_has_subject_property',
                             'OBAN:association_has_object_property',
                             'CPT:has_possibly_included_panel_element',
                             'DRUGBANK:category',
                             'EFO:is_executed_in',
                             'HANCESTRO:0301',
                             'LOINC:has_action_guidance',
                             'LOINC:has_adjustment',
                             'LOINC:has_aggregation_view',
                             'LOINC:has_approach_guidance',
                             'LOINC:has_divisor',
                             'LOINC:has_exam',
                             'LOINC:has_method',
                             'LOINC:has_modality_subtype',
                             'LOINC:has_object_guidance',
                             'LOINC:has_scale',
                             'LOINC:has_suffix',
                             'LOINC:has_time_aspect',
                             'LOINC:has_time_modifier',
                             'LOINC:has_timing_of',
                             'NCIT:R88',
                             'NCIT:eo_disease_has_property_or_attribute',
                             'NCIT:has_data_element',
                             'NCIT:has_pharmaceutical_administration_method',
                             'NCIT:has_pharmaceutical_basic_dose_form',
                             'NCIT:has_pharmaceutical_intended_site',
                             'NCIT:has_pharmaceutical_release_characteristics',
                             'NCIT:has_pharmaceutical_state_of_matter',
                             'NCIT:has_pharmaceutical_transformation',
                             'NCIT:is_qualified_by',
                             'NCIT:qualifier_applies_to',
                             'NCIT:role_has_domain',
                             'NCIT:role_has_range',
                             'INO:0000154',
                             'HANCESTRO:0308',
                             'OMIM:has_inheritance_type',
                             'orphanet:C016',
                             'orphanet:C017',
                             'RO:0000053',
                             'RO:0000086',
                             'RO:0000087',
                             'SNOMED:has_access',
                             'SNOMED:has_clinical_course',
                             'SNOMED:has_count_of_base_of_active_ingredient',
                             'SNOMED:has_dose_form_administration_method',
                             'SNOMED:has_dose_form_release_characteristic',
                             'SNOMED:has_dose_form_transformation',
                             'SNOMED:has_finding_context',
                             'SNOMED:has_finding_informer',
                             'SNOMED:has_inherent_attribute',
                             'SNOMED:has_intent',
                             'SNOMED:has_interpretation',
                             'SNOMED:has_laterality',
                             'SNOMED:has_measurement_method',
                             'SNOMED:has_method',
                             'SNOMED:has_priority',
                             'SNOMED:has_procedure_context',
                             'SNOMED:has_process_duration',
                             'SNOMED:has_property',
                             'SNOMED:has_revision_status',
                             'SNOMED:has_scale_type',
                             'SNOMED:has_severity',
                             'SNOMED:has_specimen',
                             'SNOMED:has_state_of_matter',
                             'SNOMED:has_subject_relationship_context',
                             'SNOMED:has_surgical_approach',
                             'SNOMED:has_technique',
                             'SNOMED:has_temporal_context',
                             'SNOMED:has_time_aspect',
                             'SNOMED:has_units',
                             'UMLS:has_structural_class',
                             'UMLS:has_supported_concept_property',
                             'UMLS:has_supported_concept_relationship',
                             'UMLS:may_be_qualified_by'],
         'slot_uri': 'biolink:has_attribute'} })
    deprecated: Optional[bool] = Field(None, description="""A boolean flag indicating that an entity is no longer considered current or valid.""", json_schema_extra = { "linkml_meta": {'alias': 'deprecated',
         'definition_uri': 'https://w3id.org/biolink/vocab/deprecated',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['oboInOwl:ObsoleteClass'],
         'slot_uri': 'biolink:deprecated'} })
    provided_by: Optional[List[str]] = Field(None, description="""The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.""", json_schema_extra = { "linkml_meta": {'alias': 'provided_by',
         'definition_uri': 'https://w3id.org/biolink/vocab/provided_by',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:provided_by'} })
    xref: Optional[List[str]] = Field(default_factory=list, description="""A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.""", json_schema_extra = { "linkml_meta": {'alias': 'xref',
         'aliases': ['dbxref', 'Dbxref', 'DbXref', 'record_url', 'source_record_urls'],
         'definition_uri': 'https://w3id.org/biolink/vocab/xref',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'gene',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'narrow_mappings': ['gff3:Dbxref', 'gpi:DB_Xrefs'],
         'slot_uri': 'biolink:xref'} })
    full_name: Optional[str] = Field(None, description="""a long-form human readable name for a thing""", json_schema_extra = { "linkml_meta": {'alias': 'full_name',
         'definition_uri': 'https://w3id.org/biolink/vocab/full_name',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:full_name'} })
    synonym: Optional[List[str]] = Field(default_factory=list, description="""Alternate human-readable names for a thing""", json_schema_extra = { "linkml_meta": {'alias': 'synonym',
         'aliases': ['alias'],
         'definition_uri': 'https://w3id.org/biolink/vocab/synonym',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'is_a': 'node property',
         'narrow_mappings': ['skos:altLabel',
                             'gff3:Alias',
                             'AGRKB:synonyms',
                             'gpi:DB_Object_Synonyms',
                             'HANCESTRO:0330',
                             'IAO:0000136',
                             'RXNORM:has_tradename'],
         'slot_uri': 'biolink:synonym'} })

    @field_validator('category')
    def pattern_category(cls, v):
        pattern=re.compile(r"^bican:[A-Z][A-Za-z]+$")
        if isinstance(v,list):
            for element in v:
                if not pattern.match(element):
                    raise ValueError(f"Invalid category format: {element}")
        elif isinstance(v,str):
            if not pattern.match(v):
                raise ValueError(f"Invalid category format: {v}")
        return v


class Attribute(NamedThing, OntologyClass):
    """
    A property or characteristic of an entity. For example, an apple may have properties such as color, shape, age, crispiness. An environmental sample may have attributes such as depth, lat, long, material.
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'class_uri': 'biolink:Attribute',
         'definition_uri': 'https://w3id.org/biolink/vocab/Attribute',
         'exact_mappings': ['SIO:000614'],
         'from_schema': 'https://w3id.org/biolink/bican-biolink-schema',
         'id_prefixes': ['EDAM-DATA', 'EDAM-FORMAT', 'EDAM-OPERATION', 'EDAM-TOPIC'],
         'in_subset': ['samples'],
         'mixins': ['OntologyClass'],
         'slot_usage': {'name': {'description': "The human-readable 'attribute name' "
                                                'can be set to a string which reflects '
                                                'its context of interpretation, e.g. '
                                                'SEPIO evidence/provenance/confidence '
                                                'annotation or it can default to the '
                                                "name associated with the 'has "
                                                "attribute type' slot ontology term.",
                                 'name': 'name'}}})

    id: str = Field(..., description="""A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI""", json_schema_extra = { "linkml_meta": {'alias': 'id',
         'definition_uri': 'https://w3id.org/biolink/vocab/id',
         'domain': 'entity',
         'domain_of': ['ontology class',
                       'entity',
                       'attribute',
                       'named thing',
                       'taxonomic rank',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['AGRKB:primaryId', 'gff3:ID', 'gpi:DB_Object_ID'],
         'in_subset': ['translator_minimal'],
         'slot_uri': 'biolink:id'} })
    category: List[Literal["https://w3id.org/biolink/vocab/Attribute","biolink:Attribute"]] = Field(["biolink:Attribute"], description="""Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}. NOTE: The category slot was modified to have a curie range and a pattern for bican categories.""", json_schema_extra = { "linkml_meta": {'alias': 'category',
         'definition_uri': 'https://w3id.org/biolink/vocab/category',
         'designates_type': True,
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'is_a': 'type',
         'is_class_field': True,
         'slot_uri': 'biolink:category'} })
    type: Optional[List[str]] = Field(default_factory=list, json_schema_extra = { "linkml_meta": {'alias': 'type',
         'definition_uri': 'https://w3id.org/biolink/vocab/type',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:type', 'gpi:DB_Object_Type'],
         'mappings': ['rdf:type'],
         'slot_uri': 'rdf:type'} })
    description: Optional[str] = Field(None, description="""a human-readable description of an entity""", json_schema_extra = { "linkml_meta": {'alias': 'description',
         'aliases': ['definition'],
         'definition_uri': 'https://w3id.org/biolink/vocab/description',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['IAO:0000115', 'skos:definitions'],
         'in_subset': ['translator_minimal'],
         'mappings': ['dct:description'],
         'narrow_mappings': ['gff3:Description'],
         'slot_uri': 'dct:description'} })
    has_attribute: Optional[List[str]] = Field(None, description="""connects any entity to an attribute""", json_schema_extra = { "linkml_meta": {'alias': 'has_attribute',
         'close_mappings': ['OBI:0001927'],
         'definition_uri': 'https://w3id.org/biolink/vocab/has_attribute',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['SIO:000008'],
         'in_subset': ['samples'],
         'narrow_mappings': ['OBAN:association_has_subject_property',
                             'OBAN:association_has_object_property',
                             'CPT:has_possibly_included_panel_element',
                             'DRUGBANK:category',
                             'EFO:is_executed_in',
                             'HANCESTRO:0301',
                             'LOINC:has_action_guidance',
                             'LOINC:has_adjustment',
                             'LOINC:has_aggregation_view',
                             'LOINC:has_approach_guidance',
                             'LOINC:has_divisor',
                             'LOINC:has_exam',
                             'LOINC:has_method',
                             'LOINC:has_modality_subtype',
                             'LOINC:has_object_guidance',
                             'LOINC:has_scale',
                             'LOINC:has_suffix',
                             'LOINC:has_time_aspect',
                             'LOINC:has_time_modifier',
                             'LOINC:has_timing_of',
                             'NCIT:R88',
                             'NCIT:eo_disease_has_property_or_attribute',
                             'NCIT:has_data_element',
                             'NCIT:has_pharmaceutical_administration_method',
                             'NCIT:has_pharmaceutical_basic_dose_form',
                             'NCIT:has_pharmaceutical_intended_site',
                             'NCIT:has_pharmaceutical_release_characteristics',
                             'NCIT:has_pharmaceutical_state_of_matter',
                             'NCIT:has_pharmaceutical_transformation',
                             'NCIT:is_qualified_by',
                             'NCIT:qualifier_applies_to',
                             'NCIT:role_has_domain',
                             'NCIT:role_has_range',
                             'INO:0000154',
                             'HANCESTRO:0308',
                             'OMIM:has_inheritance_type',
                             'orphanet:C016',
                             'orphanet:C017',
                             'RO:0000053',
                             'RO:0000086',
                             'RO:0000087',
                             'SNOMED:has_access',
                             'SNOMED:has_clinical_course',
                             'SNOMED:has_count_of_base_of_active_ingredient',
                             'SNOMED:has_dose_form_administration_method',
                             'SNOMED:has_dose_form_release_characteristic',
                             'SNOMED:has_dose_form_transformation',
                             'SNOMED:has_finding_context',
                             'SNOMED:has_finding_informer',
                             'SNOMED:has_inherent_attribute',
                             'SNOMED:has_intent',
                             'SNOMED:has_interpretation',
                             'SNOMED:has_laterality',
                             'SNOMED:has_measurement_method',
                             'SNOMED:has_method',
                             'SNOMED:has_priority',
                             'SNOMED:has_procedure_context',
                             'SNOMED:has_process_duration',
                             'SNOMED:has_property',
                             'SNOMED:has_revision_status',
                             'SNOMED:has_scale_type',
                             'SNOMED:has_severity',
                             'SNOMED:has_specimen',
                             'SNOMED:has_state_of_matter',
                             'SNOMED:has_subject_relationship_context',
                             'SNOMED:has_surgical_approach',
                             'SNOMED:has_technique',
                             'SNOMED:has_temporal_context',
                             'SNOMED:has_time_aspect',
                             'SNOMED:has_units',
                             'UMLS:has_structural_class',
                             'UMLS:has_supported_concept_property',
                             'UMLS:has_supported_concept_relationship',
                             'UMLS:may_be_qualified_by'],
         'slot_uri': 'biolink:has_attribute'} })
    deprecated: Optional[bool] = Field(None, description="""A boolean flag indicating that an entity is no longer considered current or valid.""", json_schema_extra = { "linkml_meta": {'alias': 'deprecated',
         'definition_uri': 'https://w3id.org/biolink/vocab/deprecated',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['oboInOwl:ObsoleteClass'],
         'slot_uri': 'biolink:deprecated'} })
    provided_by: Optional[List[str]] = Field(None, description="""The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.""", json_schema_extra = { "linkml_meta": {'alias': 'provided_by',
         'definition_uri': 'https://w3id.org/biolink/vocab/provided_by',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:provided_by'} })
    xref: Optional[List[str]] = Field(default_factory=list, description="""A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.""", json_schema_extra = { "linkml_meta": {'alias': 'xref',
         'aliases': ['dbxref', 'Dbxref', 'DbXref', 'record_url', 'source_record_urls'],
         'definition_uri': 'https://w3id.org/biolink/vocab/xref',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'gene',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'narrow_mappings': ['gff3:Dbxref', 'gpi:DB_Xrefs'],
         'slot_uri': 'biolink:xref'} })
    full_name: Optional[str] = Field(None, description="""a long-form human readable name for a thing""", json_schema_extra = { "linkml_meta": {'alias': 'full_name',
         'definition_uri': 'https://w3id.org/biolink/vocab/full_name',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:full_name'} })
    synonym: Optional[List[str]] = Field(default_factory=list, description="""Alternate human-readable names for a thing""", json_schema_extra = { "linkml_meta": {'alias': 'synonym',
         'aliases': ['alias'],
         'definition_uri': 'https://w3id.org/biolink/vocab/synonym',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'is_a': 'node property',
         'narrow_mappings': ['skos:altLabel',
                             'gff3:Alias',
                             'AGRKB:synonyms',
                             'gpi:DB_Object_Synonyms',
                             'HANCESTRO:0330',
                             'IAO:0000136',
                             'RXNORM:has_tradename'],
         'slot_uri': 'biolink:synonym'} })
    attribute_name: Optional[str] = Field(None, description="""The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.""", json_schema_extra = { "linkml_meta": {'alias': 'name',
         'aliases': ['label', 'display name', 'title'],
         'definition_uri': 'https://w3id.org/biolink/vocab/name',
         'domain': 'attribute',
         'domain_of': ['attribute'],
         'exact_mappings': ['gff3:Name', 'gpi:DB_Object_Name'],
         'in_subset': ['translator_minimal', 'samples'],
         'is_a': 'name',
         'is_usage_slot': True,
         'mappings': ['rdfs:label'],
         'narrow_mappings': ['dct:title', 'WIKIDATA_PROPERTY:P1476'],
         'slot_uri': 'rdfs:label',
         'usage_slot_name': 'name'} })
    has_attribute_type: str = Field(..., description="""connects an attribute to a class that describes it""", json_schema_extra = { "linkml_meta": {'alias': 'has_attribute_type',
         'definition_uri': 'https://w3id.org/biolink/vocab/has_attribute_type',
         'domain': 'attribute',
         'domain_of': ['attribute'],
         'in_subset': ['samples'],
         'narrow_mappings': ['LOINC:has_modality_type', 'LOINC:has_view_type'],
         'slot_uri': 'biolink:has_attribute_type'} })
    has_quantitative_value: Optional[List[QuantityValue]] = Field(None, description="""connects an attribute to a value""", json_schema_extra = { "linkml_meta": {'alias': 'has_quantitative_value',
         'definition_uri': 'https://w3id.org/biolink/vocab/has_quantitative_value',
         'domain': 'attribute',
         'domain_of': ['attribute'],
         'exact_mappings': ['qud:quantityValue'],
         'in_subset': ['samples'],
         'narrow_mappings': ['SNOMED:has_concentration_strength_numerator_value',
                             'SNOMED:has_presentation_strength_denominator_value',
                             'SNOMED:has_presentation_strength_numerator_value'],
         'slot_uri': 'biolink:has_quantitative_value'} })
    has_qualitative_value: Optional[str] = Field(None, description="""connects an attribute to a value""", json_schema_extra = { "linkml_meta": {'alias': 'has_qualitative_value',
         'definition_uri': 'https://w3id.org/biolink/vocab/has_qualitative_value',
         'domain': 'attribute',
         'domain_of': ['attribute'],
         'in_subset': ['samples'],
         'slot_uri': 'biolink:has_qualitative_value'} })
    iri: Optional[str] = Field(None, description="""An IRI for an entity. This is determined by the id using expansion rules.""", json_schema_extra = { "linkml_meta": {'alias': 'iri',
         'definition_uri': 'https://w3id.org/biolink/vocab/iri',
         'domain_of': ['attribute',
                       'entity',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['WIKIDATA_PROPERTY:P854'],
         'in_subset': ['translator_minimal', 'samples'],
         'slot_uri': 'biolink:iri'} })
    name: Optional[str] = Field(None, description="""The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.""", json_schema_extra = { "linkml_meta": {'alias': 'name',
         'definition_uri': 'https://w3id.org/biolink/vocab/name',
         'domain': 'entity',
         'domain_of': ['entity',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'macromolecular machine mixin',
                       'gene or gene product',
                       'gene',
                       'genome'],
         'slot_uri': 'rdfs:label'} })

    @field_validator('category')
    def pattern_category(cls, v):
        pattern=re.compile(r"^bican:[A-Z][A-Za-z]+$")
        if isinstance(v,list):
            for element in v:
                if not pattern.match(element):
                    raise ValueError(f"Invalid category format: {element}")
        elif isinstance(v,str):
            if not pattern.match(v):
                raise ValueError(f"Invalid category format: {v}")
        return v


class TaxonomicRank(OntologyClass):
    """
    A descriptor for the rank within a taxonomic classification. Example instance: TAXRANK:0000017 (kingdom)
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'class_uri': 'biolink:TaxonomicRank',
         'definition_uri': 'https://w3id.org/biolink/vocab/TaxonomicRank',
         'from_schema': 'https://w3id.org/biolink/bican-biolink-schema',
         'id_prefixes': ['TAXRANK'],
         'mappings': ['WIKIDATA:Q427626']})

    id: str = Field(..., description="""A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI""", json_schema_extra = { "linkml_meta": {'alias': 'id',
         'definition_uri': 'https://w3id.org/biolink/vocab/id',
         'domain': 'entity',
         'domain_of': ['ontology class',
                       'entity',
                       'attribute',
                       'named thing',
                       'taxonomic rank',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['AGRKB:primaryId', 'gff3:ID', 'gpi:DB_Object_ID'],
         'in_subset': ['translator_minimal'],
         'slot_uri': 'biolink:id'} })


class OrganismTaxon(NamedThing):
    """
    A classification of a set of organisms. Example instances: NCBITaxon:9606 (Homo sapiens), NCBITaxon:2 (Bacteria). Can also be used to represent strains or subspecies.
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'aliases': ['taxon', 'taxonomic classification'],
         'class_uri': 'biolink:OrganismTaxon',
         'definition_uri': 'https://w3id.org/biolink/vocab/OrganismTaxon',
         'exact_mappings': ['WIKIDATA:Q16521', 'STY:T001', 'bioschemas:Taxon'],
         'from_schema': 'https://w3id.org/biolink/bican-biolink-schema',
         'id_prefixes': ['NCBITaxon', 'MESH', 'UMLS'],
         'in_subset': ['model_organism_database'],
         'narrow_mappings': ['dcid:BiologicalSpecies'],
         'values_from': ['NCBITaxon']})

    id: str = Field(..., description="""A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI""", json_schema_extra = { "linkml_meta": {'alias': 'id',
         'definition_uri': 'https://w3id.org/biolink/vocab/id',
         'domain': 'entity',
         'domain_of': ['ontology class',
                       'entity',
                       'attribute',
                       'named thing',
                       'taxonomic rank',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['AGRKB:primaryId', 'gff3:ID', 'gpi:DB_Object_ID'],
         'in_subset': ['translator_minimal'],
         'slot_uri': 'biolink:id'} })
    iri: Optional[str] = Field(None, description="""An IRI for an entity. This is determined by the id using expansion rules.""", json_schema_extra = { "linkml_meta": {'alias': 'iri',
         'definition_uri': 'https://w3id.org/biolink/vocab/iri',
         'domain_of': ['attribute',
                       'entity',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['WIKIDATA_PROPERTY:P854'],
         'in_subset': ['translator_minimal', 'samples'],
         'slot_uri': 'biolink:iri'} })
    category: List[Literal["https://w3id.org/biolink/vocab/OrganismTaxon","biolink:OrganismTaxon"]] = Field(["biolink:OrganismTaxon"], description="""Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}. NOTE: The category slot was modified to have a curie range and a pattern for bican categories.""", json_schema_extra = { "linkml_meta": {'alias': 'category',
         'definition_uri': 'https://w3id.org/biolink/vocab/category',
         'designates_type': True,
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'is_a': 'type',
         'is_class_field': True,
         'slot_uri': 'biolink:category'} })
    type: Optional[List[str]] = Field(default_factory=list, json_schema_extra = { "linkml_meta": {'alias': 'type',
         'definition_uri': 'https://w3id.org/biolink/vocab/type',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:type', 'gpi:DB_Object_Type'],
         'mappings': ['rdf:type'],
         'slot_uri': 'rdf:type'} })
    name: Optional[str] = Field(None, description="""A human-readable name for an attribute or entity.""", json_schema_extra = { "linkml_meta": {'alias': 'name',
         'aliases': ['label', 'display name', 'title'],
         'definition_uri': 'https://w3id.org/biolink/vocab/name',
         'domain': 'entity',
         'domain_of': ['attribute',
                       'entity',
                       'macromolecular machine mixin',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene or gene product',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:Name', 'gpi:DB_Object_Name'],
         'in_subset': ['translator_minimal', 'samples'],
         'mappings': ['rdfs:label'],
         'narrow_mappings': ['dct:title', 'WIKIDATA_PROPERTY:P1476'],
         'slot_uri': 'rdfs:label'} })
    description: Optional[str] = Field(None, description="""a human-readable description of an entity""", json_schema_extra = { "linkml_meta": {'alias': 'description',
         'aliases': ['definition'],
         'definition_uri': 'https://w3id.org/biolink/vocab/description',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['IAO:0000115', 'skos:definitions'],
         'in_subset': ['translator_minimal'],
         'mappings': ['dct:description'],
         'narrow_mappings': ['gff3:Description'],
         'slot_uri': 'dct:description'} })
    has_attribute: Optional[List[str]] = Field(None, description="""connects any entity to an attribute""", json_schema_extra = { "linkml_meta": {'alias': 'has_attribute',
         'close_mappings': ['OBI:0001927'],
         'definition_uri': 'https://w3id.org/biolink/vocab/has_attribute',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['SIO:000008'],
         'in_subset': ['samples'],
         'narrow_mappings': ['OBAN:association_has_subject_property',
                             'OBAN:association_has_object_property',
                             'CPT:has_possibly_included_panel_element',
                             'DRUGBANK:category',
                             'EFO:is_executed_in',
                             'HANCESTRO:0301',
                             'LOINC:has_action_guidance',
                             'LOINC:has_adjustment',
                             'LOINC:has_aggregation_view',
                             'LOINC:has_approach_guidance',
                             'LOINC:has_divisor',
                             'LOINC:has_exam',
                             'LOINC:has_method',
                             'LOINC:has_modality_subtype',
                             'LOINC:has_object_guidance',
                             'LOINC:has_scale',
                             'LOINC:has_suffix',
                             'LOINC:has_time_aspect',
                             'LOINC:has_time_modifier',
                             'LOINC:has_timing_of',
                             'NCIT:R88',
                             'NCIT:eo_disease_has_property_or_attribute',
                             'NCIT:has_data_element',
                             'NCIT:has_pharmaceutical_administration_method',
                             'NCIT:has_pharmaceutical_basic_dose_form',
                             'NCIT:has_pharmaceutical_intended_site',
                             'NCIT:has_pharmaceutical_release_characteristics',
                             'NCIT:has_pharmaceutical_state_of_matter',
                             'NCIT:has_pharmaceutical_transformation',
                             'NCIT:is_qualified_by',
                             'NCIT:qualifier_applies_to',
                             'NCIT:role_has_domain',
                             'NCIT:role_has_range',
                             'INO:0000154',
                             'HANCESTRO:0308',
                             'OMIM:has_inheritance_type',
                             'orphanet:C016',
                             'orphanet:C017',
                             'RO:0000053',
                             'RO:0000086',
                             'RO:0000087',
                             'SNOMED:has_access',
                             'SNOMED:has_clinical_course',
                             'SNOMED:has_count_of_base_of_active_ingredient',
                             'SNOMED:has_dose_form_administration_method',
                             'SNOMED:has_dose_form_release_characteristic',
                             'SNOMED:has_dose_form_transformation',
                             'SNOMED:has_finding_context',
                             'SNOMED:has_finding_informer',
                             'SNOMED:has_inherent_attribute',
                             'SNOMED:has_intent',
                             'SNOMED:has_interpretation',
                             'SNOMED:has_laterality',
                             'SNOMED:has_measurement_method',
                             'SNOMED:has_method',
                             'SNOMED:has_priority',
                             'SNOMED:has_procedure_context',
                             'SNOMED:has_process_duration',
                             'SNOMED:has_property',
                             'SNOMED:has_revision_status',
                             'SNOMED:has_scale_type',
                             'SNOMED:has_severity',
                             'SNOMED:has_specimen',
                             'SNOMED:has_state_of_matter',
                             'SNOMED:has_subject_relationship_context',
                             'SNOMED:has_surgical_approach',
                             'SNOMED:has_technique',
                             'SNOMED:has_temporal_context',
                             'SNOMED:has_time_aspect',
                             'SNOMED:has_units',
                             'UMLS:has_structural_class',
                             'UMLS:has_supported_concept_property',
                             'UMLS:has_supported_concept_relationship',
                             'UMLS:may_be_qualified_by'],
         'slot_uri': 'biolink:has_attribute'} })
    deprecated: Optional[bool] = Field(None, description="""A boolean flag indicating that an entity is no longer considered current or valid.""", json_schema_extra = { "linkml_meta": {'alias': 'deprecated',
         'definition_uri': 'https://w3id.org/biolink/vocab/deprecated',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['oboInOwl:ObsoleteClass'],
         'slot_uri': 'biolink:deprecated'} })
    provided_by: Optional[List[str]] = Field(None, description="""The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.""", json_schema_extra = { "linkml_meta": {'alias': 'provided_by',
         'definition_uri': 'https://w3id.org/biolink/vocab/provided_by',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:provided_by'} })
    xref: Optional[List[str]] = Field(default_factory=list, description="""A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.""", json_schema_extra = { "linkml_meta": {'alias': 'xref',
         'aliases': ['dbxref', 'Dbxref', 'DbXref', 'record_url', 'source_record_urls'],
         'definition_uri': 'https://w3id.org/biolink/vocab/xref',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'gene',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'narrow_mappings': ['gff3:Dbxref', 'gpi:DB_Xrefs'],
         'slot_uri': 'biolink:xref'} })
    full_name: Optional[str] = Field(None, description="""a long-form human readable name for a thing""", json_schema_extra = { "linkml_meta": {'alias': 'full_name',
         'definition_uri': 'https://w3id.org/biolink/vocab/full_name',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:full_name'} })
    synonym: Optional[List[str]] = Field(default_factory=list, description="""Alternate human-readable names for a thing""", json_schema_extra = { "linkml_meta": {'alias': 'synonym',
         'aliases': ['alias'],
         'definition_uri': 'https://w3id.org/biolink/vocab/synonym',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'is_a': 'node property',
         'narrow_mappings': ['skos:altLabel',
                             'gff3:Alias',
                             'AGRKB:synonyms',
                             'gpi:DB_Object_Synonyms',
                             'HANCESTRO:0330',
                             'IAO:0000136',
                             'RXNORM:has_tradename'],
         'slot_uri': 'biolink:synonym'} })
    has_taxonomic_rank: Optional[str] = Field(None, json_schema_extra = { "linkml_meta": {'alias': 'has_taxonomic_rank',
         'definition_uri': 'https://w3id.org/biolink/vocab/has_taxonomic_rank',
         'domain': 'named thing',
         'domain_of': ['organism taxon'],
         'is_a': 'node property',
         'mappings': ['WIKIDATA:P105'],
         'slot_uri': 'biolink:has_taxonomic_rank'} })

    @field_validator('category')
    def pattern_category(cls, v):
        pattern=re.compile(r"^bican:[A-Z][A-Za-z]+$")
        if isinstance(v,list):
            for element in v:
                if not pattern.match(element):
                    raise ValueError(f"Invalid category format: {element}")
        elif isinstance(v,str):
            if not pattern.match(v):
                raise ValueError(f"Invalid category format: {v}")
        return v


class InformationContentEntity(NamedThing):
    """
    a piece of information that typically describes some topic of discourse or is used as support.
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'abstract': True,
         'aliases': ['information', 'information artefact', 'information entity'],
         'class_uri': 'biolink:InformationContentEntity',
         'definition_uri': 'https://w3id.org/biolink/vocab/InformationContentEntity',
         'exact_mappings': ['IAO:0000030'],
         'from_schema': 'https://w3id.org/biolink/bican-biolink-schema',
         'id_prefixes': ['doi'],
         'narrow_mappings': ['UMLSSG:CONC',
                             'STY:T077',
                             'STY:T078',
                             'STY:T079',
                             'STY:T080',
                             'STY:T081',
                             'STY:T082',
                             'STY:T089',
                             'STY:T102',
                             'STY:T169',
                             'STY:T171',
                             'STY:T185']})

    id: str = Field(..., description="""A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI""", json_schema_extra = { "linkml_meta": {'alias': 'id',
         'definition_uri': 'https://w3id.org/biolink/vocab/id',
         'domain': 'entity',
         'domain_of': ['ontology class',
                       'entity',
                       'attribute',
                       'named thing',
                       'taxonomic rank',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['AGRKB:primaryId', 'gff3:ID', 'gpi:DB_Object_ID'],
         'in_subset': ['translator_minimal'],
         'slot_uri': 'biolink:id'} })
    iri: Optional[str] = Field(None, description="""An IRI for an entity. This is determined by the id using expansion rules.""", json_schema_extra = { "linkml_meta": {'alias': 'iri',
         'definition_uri': 'https://w3id.org/biolink/vocab/iri',
         'domain_of': ['attribute',
                       'entity',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['WIKIDATA_PROPERTY:P854'],
         'in_subset': ['translator_minimal', 'samples'],
         'slot_uri': 'biolink:iri'} })
    category: List[Literal["https://w3id.org/biolink/vocab/InformationContentEntity","biolink:InformationContentEntity"]] = Field(["biolink:InformationContentEntity"], description="""Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}. NOTE: The category slot was modified to have a curie range and a pattern for bican categories.""", json_schema_extra = { "linkml_meta": {'alias': 'category',
         'definition_uri': 'https://w3id.org/biolink/vocab/category',
         'designates_type': True,
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'is_a': 'type',
         'is_class_field': True,
         'slot_uri': 'biolink:category'} })
    type: Optional[List[str]] = Field(default_factory=list, json_schema_extra = { "linkml_meta": {'alias': 'type',
         'definition_uri': 'https://w3id.org/biolink/vocab/type',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:type', 'gpi:DB_Object_Type'],
         'mappings': ['rdf:type'],
         'slot_uri': 'rdf:type'} })
    name: Optional[str] = Field(None, description="""A human-readable name for an attribute or entity.""", json_schema_extra = { "linkml_meta": {'alias': 'name',
         'aliases': ['label', 'display name', 'title'],
         'definition_uri': 'https://w3id.org/biolink/vocab/name',
         'domain': 'entity',
         'domain_of': ['attribute',
                       'entity',
                       'macromolecular machine mixin',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene or gene product',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:Name', 'gpi:DB_Object_Name'],
         'in_subset': ['translator_minimal', 'samples'],
         'mappings': ['rdfs:label'],
         'narrow_mappings': ['dct:title', 'WIKIDATA_PROPERTY:P1476'],
         'slot_uri': 'rdfs:label'} })
    description: Optional[str] = Field(None, description="""a human-readable description of an entity""", json_schema_extra = { "linkml_meta": {'alias': 'description',
         'aliases': ['definition'],
         'definition_uri': 'https://w3id.org/biolink/vocab/description',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['IAO:0000115', 'skos:definitions'],
         'in_subset': ['translator_minimal'],
         'mappings': ['dct:description'],
         'narrow_mappings': ['gff3:Description'],
         'slot_uri': 'dct:description'} })
    has_attribute: Optional[List[str]] = Field(None, description="""connects any entity to an attribute""", json_schema_extra = { "linkml_meta": {'alias': 'has_attribute',
         'close_mappings': ['OBI:0001927'],
         'definition_uri': 'https://w3id.org/biolink/vocab/has_attribute',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['SIO:000008'],
         'in_subset': ['samples'],
         'narrow_mappings': ['OBAN:association_has_subject_property',
                             'OBAN:association_has_object_property',
                             'CPT:has_possibly_included_panel_element',
                             'DRUGBANK:category',
                             'EFO:is_executed_in',
                             'HANCESTRO:0301',
                             'LOINC:has_action_guidance',
                             'LOINC:has_adjustment',
                             'LOINC:has_aggregation_view',
                             'LOINC:has_approach_guidance',
                             'LOINC:has_divisor',
                             'LOINC:has_exam',
                             'LOINC:has_method',
                             'LOINC:has_modality_subtype',
                             'LOINC:has_object_guidance',
                             'LOINC:has_scale',
                             'LOINC:has_suffix',
                             'LOINC:has_time_aspect',
                             'LOINC:has_time_modifier',
                             'LOINC:has_timing_of',
                             'NCIT:R88',
                             'NCIT:eo_disease_has_property_or_attribute',
                             'NCIT:has_data_element',
                             'NCIT:has_pharmaceutical_administration_method',
                             'NCIT:has_pharmaceutical_basic_dose_form',
                             'NCIT:has_pharmaceutical_intended_site',
                             'NCIT:has_pharmaceutical_release_characteristics',
                             'NCIT:has_pharmaceutical_state_of_matter',
                             'NCIT:has_pharmaceutical_transformation',
                             'NCIT:is_qualified_by',
                             'NCIT:qualifier_applies_to',
                             'NCIT:role_has_domain',
                             'NCIT:role_has_range',
                             'INO:0000154',
                             'HANCESTRO:0308',
                             'OMIM:has_inheritance_type',
                             'orphanet:C016',
                             'orphanet:C017',
                             'RO:0000053',
                             'RO:0000086',
                             'RO:0000087',
                             'SNOMED:has_access',
                             'SNOMED:has_clinical_course',
                             'SNOMED:has_count_of_base_of_active_ingredient',
                             'SNOMED:has_dose_form_administration_method',
                             'SNOMED:has_dose_form_release_characteristic',
                             'SNOMED:has_dose_form_transformation',
                             'SNOMED:has_finding_context',
                             'SNOMED:has_finding_informer',
                             'SNOMED:has_inherent_attribute',
                             'SNOMED:has_intent',
                             'SNOMED:has_interpretation',
                             'SNOMED:has_laterality',
                             'SNOMED:has_measurement_method',
                             'SNOMED:has_method',
                             'SNOMED:has_priority',
                             'SNOMED:has_procedure_context',
                             'SNOMED:has_process_duration',
                             'SNOMED:has_property',
                             'SNOMED:has_revision_status',
                             'SNOMED:has_scale_type',
                             'SNOMED:has_severity',
                             'SNOMED:has_specimen',
                             'SNOMED:has_state_of_matter',
                             'SNOMED:has_subject_relationship_context',
                             'SNOMED:has_surgical_approach',
                             'SNOMED:has_technique',
                             'SNOMED:has_temporal_context',
                             'SNOMED:has_time_aspect',
                             'SNOMED:has_units',
                             'UMLS:has_structural_class',
                             'UMLS:has_supported_concept_property',
                             'UMLS:has_supported_concept_relationship',
                             'UMLS:may_be_qualified_by'],
         'slot_uri': 'biolink:has_attribute'} })
    deprecated: Optional[bool] = Field(None, description="""A boolean flag indicating that an entity is no longer considered current or valid.""", json_schema_extra = { "linkml_meta": {'alias': 'deprecated',
         'definition_uri': 'https://w3id.org/biolink/vocab/deprecated',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['oboInOwl:ObsoleteClass'],
         'slot_uri': 'biolink:deprecated'} })
    provided_by: Optional[List[str]] = Field(None, description="""The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.""", json_schema_extra = { "linkml_meta": {'alias': 'provided_by',
         'definition_uri': 'https://w3id.org/biolink/vocab/provided_by',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:provided_by'} })
    xref: Optional[List[str]] = Field(default_factory=list, description="""A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.""", json_schema_extra = { "linkml_meta": {'alias': 'xref',
         'aliases': ['dbxref', 'Dbxref', 'DbXref', 'record_url', 'source_record_urls'],
         'definition_uri': 'https://w3id.org/biolink/vocab/xref',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'gene',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'narrow_mappings': ['gff3:Dbxref', 'gpi:DB_Xrefs'],
         'slot_uri': 'biolink:xref'} })
    full_name: Optional[str] = Field(None, description="""a long-form human readable name for a thing""", json_schema_extra = { "linkml_meta": {'alias': 'full_name',
         'definition_uri': 'https://w3id.org/biolink/vocab/full_name',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:full_name'} })
    synonym: Optional[List[str]] = Field(default_factory=list, description="""Alternate human-readable names for a thing""", json_schema_extra = { "linkml_meta": {'alias': 'synonym',
         'aliases': ['alias'],
         'definition_uri': 'https://w3id.org/biolink/vocab/synonym',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'is_a': 'node property',
         'narrow_mappings': ['skos:altLabel',
                             'gff3:Alias',
                             'AGRKB:synonyms',
                             'gpi:DB_Object_Synonyms',
                             'HANCESTRO:0330',
                             'IAO:0000136',
                             'RXNORM:has_tradename'],
         'slot_uri': 'biolink:synonym'} })
    license: Optional[str] = Field(None, json_schema_extra = { "linkml_meta": {'alias': 'license',
         'definition_uri': 'https://w3id.org/biolink/vocab/license',
         'domain': 'information content entity',
         'domain_of': ['information content entity', 'dataset'],
         'exact_mappings': ['dct:license'],
         'is_a': 'node property',
         'narrow_mappings': ['WIKIDATA_PROPERTY:P275'],
         'slot_uri': 'biolink:license'} })
    rights: Optional[str] = Field(None, json_schema_extra = { "linkml_meta": {'alias': 'rights',
         'definition_uri': 'https://w3id.org/biolink/vocab/rights',
         'domain': 'information content entity',
         'domain_of': ['information content entity', 'dataset'],
         'exact_mappings': ['dct:rights'],
         'is_a': 'node property',
         'slot_uri': 'biolink:rights'} })
    format: Optional[str] = Field(None, json_schema_extra = { "linkml_meta": {'alias': 'format',
         'definition_uri': 'https://w3id.org/biolink/vocab/format',
         'domain': 'information content entity',
         'domain_of': ['information content entity', 'dataset'],
         'exact_mappings': ['dct:format', 'WIKIDATA_PROPERTY:P2701'],
         'is_a': 'node property',
         'slot_uri': 'biolink:format'} })
    creation_date: Optional[date] = Field(None, description="""date on which an entity was created. This can be applied to nodes or edges""", json_schema_extra = { "linkml_meta": {'alias': 'creation_date',
         'aliases': ['publication date'],
         'definition_uri': 'https://w3id.org/biolink/vocab/creation_date',
         'domain': 'named thing',
         'domain_of': ['information content entity', 'dataset'],
         'exact_mappings': ['dct:createdOn', 'WIKIDATA_PROPERTY:P577'],
         'is_a': 'node property',
         'slot_uri': 'biolink:creation_date'} })

    @field_validator('category')
    def pattern_category(cls, v):
        pattern=re.compile(r"^bican:[A-Z][A-Za-z]+$")
        if isinstance(v,list):
            for element in v:
                if not pattern.match(element):
                    raise ValueError(f"Invalid category format: {element}")
        elif isinstance(v,str):
            if not pattern.match(v):
                raise ValueError(f"Invalid category format: {v}")
        return v


class Dataset(InformationContentEntity):
    """
    an item that refers to a collection of data from a data source.
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'class_uri': 'biolink:Dataset',
         'definition_uri': 'https://w3id.org/biolink/vocab/Dataset',
         'exact_mappings': ['IAO:0000100',
                            'dctypes:Dataset',
                            'schema:dataset',
                            'dcid:Dataset'],
         'from_schema': 'https://w3id.org/biolink/bican-biolink-schema'})

    id: str = Field(..., description="""A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI""", json_schema_extra = { "linkml_meta": {'alias': 'id',
         'definition_uri': 'https://w3id.org/biolink/vocab/id',
         'domain': 'entity',
         'domain_of': ['ontology class',
                       'entity',
                       'attribute',
                       'named thing',
                       'taxonomic rank',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['AGRKB:primaryId', 'gff3:ID', 'gpi:DB_Object_ID'],
         'in_subset': ['translator_minimal'],
         'slot_uri': 'biolink:id'} })
    iri: Optional[str] = Field(None, description="""An IRI for an entity. This is determined by the id using expansion rules.""", json_schema_extra = { "linkml_meta": {'alias': 'iri',
         'definition_uri': 'https://w3id.org/biolink/vocab/iri',
         'domain_of': ['attribute',
                       'entity',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['WIKIDATA_PROPERTY:P854'],
         'in_subset': ['translator_minimal', 'samples'],
         'slot_uri': 'biolink:iri'} })
    category: List[Literal["https://w3id.org/biolink/vocab/Dataset","biolink:Dataset"]] = Field(["biolink:Dataset"], description="""Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}. NOTE: The category slot was modified to have a curie range and a pattern for bican categories.""", json_schema_extra = { "linkml_meta": {'alias': 'category',
         'definition_uri': 'https://w3id.org/biolink/vocab/category',
         'designates_type': True,
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'is_a': 'type',
         'is_class_field': True,
         'slot_uri': 'biolink:category'} })
    type: Optional[List[str]] = Field(default_factory=list, json_schema_extra = { "linkml_meta": {'alias': 'type',
         'definition_uri': 'https://w3id.org/biolink/vocab/type',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:type', 'gpi:DB_Object_Type'],
         'mappings': ['rdf:type'],
         'slot_uri': 'rdf:type'} })
    name: Optional[str] = Field(None, description="""A human-readable name for an attribute or entity.""", json_schema_extra = { "linkml_meta": {'alias': 'name',
         'aliases': ['label', 'display name', 'title'],
         'definition_uri': 'https://w3id.org/biolink/vocab/name',
         'domain': 'entity',
         'domain_of': ['attribute',
                       'entity',
                       'macromolecular machine mixin',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene or gene product',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:Name', 'gpi:DB_Object_Name'],
         'in_subset': ['translator_minimal', 'samples'],
         'mappings': ['rdfs:label'],
         'narrow_mappings': ['dct:title', 'WIKIDATA_PROPERTY:P1476'],
         'slot_uri': 'rdfs:label'} })
    description: Optional[str] = Field(None, description="""a human-readable description of an entity""", json_schema_extra = { "linkml_meta": {'alias': 'description',
         'aliases': ['definition'],
         'definition_uri': 'https://w3id.org/biolink/vocab/description',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['IAO:0000115', 'skos:definitions'],
         'in_subset': ['translator_minimal'],
         'mappings': ['dct:description'],
         'narrow_mappings': ['gff3:Description'],
         'slot_uri': 'dct:description'} })
    has_attribute: Optional[List[str]] = Field(None, description="""connects any entity to an attribute""", json_schema_extra = { "linkml_meta": {'alias': 'has_attribute',
         'close_mappings': ['OBI:0001927'],
         'definition_uri': 'https://w3id.org/biolink/vocab/has_attribute',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['SIO:000008'],
         'in_subset': ['samples'],
         'narrow_mappings': ['OBAN:association_has_subject_property',
                             'OBAN:association_has_object_property',
                             'CPT:has_possibly_included_panel_element',
                             'DRUGBANK:category',
                             'EFO:is_executed_in',
                             'HANCESTRO:0301',
                             'LOINC:has_action_guidance',
                             'LOINC:has_adjustment',
                             'LOINC:has_aggregation_view',
                             'LOINC:has_approach_guidance',
                             'LOINC:has_divisor',
                             'LOINC:has_exam',
                             'LOINC:has_method',
                             'LOINC:has_modality_subtype',
                             'LOINC:has_object_guidance',
                             'LOINC:has_scale',
                             'LOINC:has_suffix',
                             'LOINC:has_time_aspect',
                             'LOINC:has_time_modifier',
                             'LOINC:has_timing_of',
                             'NCIT:R88',
                             'NCIT:eo_disease_has_property_or_attribute',
                             'NCIT:has_data_element',
                             'NCIT:has_pharmaceutical_administration_method',
                             'NCIT:has_pharmaceutical_basic_dose_form',
                             'NCIT:has_pharmaceutical_intended_site',
                             'NCIT:has_pharmaceutical_release_characteristics',
                             'NCIT:has_pharmaceutical_state_of_matter',
                             'NCIT:has_pharmaceutical_transformation',
                             'NCIT:is_qualified_by',
                             'NCIT:qualifier_applies_to',
                             'NCIT:role_has_domain',
                             'NCIT:role_has_range',
                             'INO:0000154',
                             'HANCESTRO:0308',
                             'OMIM:has_inheritance_type',
                             'orphanet:C016',
                             'orphanet:C017',
                             'RO:0000053',
                             'RO:0000086',
                             'RO:0000087',
                             'SNOMED:has_access',
                             'SNOMED:has_clinical_course',
                             'SNOMED:has_count_of_base_of_active_ingredient',
                             'SNOMED:has_dose_form_administration_method',
                             'SNOMED:has_dose_form_release_characteristic',
                             'SNOMED:has_dose_form_transformation',
                             'SNOMED:has_finding_context',
                             'SNOMED:has_finding_informer',
                             'SNOMED:has_inherent_attribute',
                             'SNOMED:has_intent',
                             'SNOMED:has_interpretation',
                             'SNOMED:has_laterality',
                             'SNOMED:has_measurement_method',
                             'SNOMED:has_method',
                             'SNOMED:has_priority',
                             'SNOMED:has_procedure_context',
                             'SNOMED:has_process_duration',
                             'SNOMED:has_property',
                             'SNOMED:has_revision_status',
                             'SNOMED:has_scale_type',
                             'SNOMED:has_severity',
                             'SNOMED:has_specimen',
                             'SNOMED:has_state_of_matter',
                             'SNOMED:has_subject_relationship_context',
                             'SNOMED:has_surgical_approach',
                             'SNOMED:has_technique',
                             'SNOMED:has_temporal_context',
                             'SNOMED:has_time_aspect',
                             'SNOMED:has_units',
                             'UMLS:has_structural_class',
                             'UMLS:has_supported_concept_property',
                             'UMLS:has_supported_concept_relationship',
                             'UMLS:may_be_qualified_by'],
         'slot_uri': 'biolink:has_attribute'} })
    deprecated: Optional[bool] = Field(None, description="""A boolean flag indicating that an entity is no longer considered current or valid.""", json_schema_extra = { "linkml_meta": {'alias': 'deprecated',
         'definition_uri': 'https://w3id.org/biolink/vocab/deprecated',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['oboInOwl:ObsoleteClass'],
         'slot_uri': 'biolink:deprecated'} })
    provided_by: Optional[List[str]] = Field(None, description="""The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.""", json_schema_extra = { "linkml_meta": {'alias': 'provided_by',
         'definition_uri': 'https://w3id.org/biolink/vocab/provided_by',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:provided_by'} })
    xref: Optional[List[str]] = Field(default_factory=list, description="""A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.""", json_schema_extra = { "linkml_meta": {'alias': 'xref',
         'aliases': ['dbxref', 'Dbxref', 'DbXref', 'record_url', 'source_record_urls'],
         'definition_uri': 'https://w3id.org/biolink/vocab/xref',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'gene',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'narrow_mappings': ['gff3:Dbxref', 'gpi:DB_Xrefs'],
         'slot_uri': 'biolink:xref'} })
    full_name: Optional[str] = Field(None, description="""a long-form human readable name for a thing""", json_schema_extra = { "linkml_meta": {'alias': 'full_name',
         'definition_uri': 'https://w3id.org/biolink/vocab/full_name',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:full_name'} })
    synonym: Optional[List[str]] = Field(default_factory=list, description="""Alternate human-readable names for a thing""", json_schema_extra = { "linkml_meta": {'alias': 'synonym',
         'aliases': ['alias'],
         'definition_uri': 'https://w3id.org/biolink/vocab/synonym',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'is_a': 'node property',
         'narrow_mappings': ['skos:altLabel',
                             'gff3:Alias',
                             'AGRKB:synonyms',
                             'gpi:DB_Object_Synonyms',
                             'HANCESTRO:0330',
                             'IAO:0000136',
                             'RXNORM:has_tradename'],
         'slot_uri': 'biolink:synonym'} })
    license: Optional[str] = Field(None, json_schema_extra = { "linkml_meta": {'alias': 'license',
         'definition_uri': 'https://w3id.org/biolink/vocab/license',
         'domain': 'information content entity',
         'domain_of': ['information content entity', 'dataset'],
         'exact_mappings': ['dct:license'],
         'is_a': 'node property',
         'narrow_mappings': ['WIKIDATA_PROPERTY:P275'],
         'slot_uri': 'biolink:license'} })
    rights: Optional[str] = Field(None, json_schema_extra = { "linkml_meta": {'alias': 'rights',
         'definition_uri': 'https://w3id.org/biolink/vocab/rights',
         'domain': 'information content entity',
         'domain_of': ['information content entity', 'dataset'],
         'exact_mappings': ['dct:rights'],
         'is_a': 'node property',
         'slot_uri': 'biolink:rights'} })
    format: Optional[str] = Field(None, json_schema_extra = { "linkml_meta": {'alias': 'format',
         'definition_uri': 'https://w3id.org/biolink/vocab/format',
         'domain': 'information content entity',
         'domain_of': ['information content entity', 'dataset'],
         'exact_mappings': ['dct:format', 'WIKIDATA_PROPERTY:P2701'],
         'is_a': 'node property',
         'slot_uri': 'biolink:format'} })
    creation_date: Optional[date] = Field(None, description="""date on which an entity was created. This can be applied to nodes or edges""", json_schema_extra = { "linkml_meta": {'alias': 'creation_date',
         'aliases': ['publication date'],
         'definition_uri': 'https://w3id.org/biolink/vocab/creation_date',
         'domain': 'named thing',
         'domain_of': ['information content entity', 'dataset'],
         'exact_mappings': ['dct:createdOn', 'WIKIDATA_PROPERTY:P577'],
         'is_a': 'node property',
         'slot_uri': 'biolink:creation_date'} })

    @field_validator('category')
    def pattern_category(cls, v):
        pattern=re.compile(r"^bican:[A-Z][A-Za-z]+$")
        if isinstance(v,list):
            for element in v:
                if not pattern.match(element):
                    raise ValueError(f"Invalid category format: {element}")
        elif isinstance(v,str):
            if not pattern.match(v):
                raise ValueError(f"Invalid category format: {v}")
        return v


class PhysicalEssenceOrOccurrent(ConfiguredBaseModel):
    """
    Either a physical or processual entity.
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'class_uri': 'biolink:PhysicalEssenceOrOccurrent',
         'definition_uri': 'https://w3id.org/biolink/vocab/PhysicalEssenceOrOccurrent',
         'from_schema': 'https://w3id.org/biolink/bican-biolink-schema',
         'mixin': True})

    pass


class PhysicalEssence(PhysicalEssenceOrOccurrent):
    """
    Semantic mixin concept.  Pertains to entities that have physical properties such as mass, volume, or charge.
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'class_uri': 'biolink:PhysicalEssence',
         'definition_uri': 'https://w3id.org/biolink/vocab/PhysicalEssence',
         'from_schema': 'https://w3id.org/biolink/bican-biolink-schema',
         'mixin': True})

    pass


class PhysicalEntity(PhysicalEssence, NamedThing):
    """
    An entity that has material reality (a.k.a. physical essence).
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'class_uri': 'biolink:PhysicalEntity',
         'definition_uri': 'https://w3id.org/biolink/vocab/PhysicalEntity',
         'exact_mappings': ['STY:T072'],
         'from_schema': 'https://w3id.org/biolink/bican-biolink-schema',
         'mixins': ['PhysicalEssence'],
         'narrow_mappings': ['STY:T073']})

    id: str = Field(..., description="""A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI""", json_schema_extra = { "linkml_meta": {'alias': 'id',
         'definition_uri': 'https://w3id.org/biolink/vocab/id',
         'domain': 'entity',
         'domain_of': ['ontology class',
                       'entity',
                       'attribute',
                       'named thing',
                       'taxonomic rank',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['AGRKB:primaryId', 'gff3:ID', 'gpi:DB_Object_ID'],
         'in_subset': ['translator_minimal'],
         'slot_uri': 'biolink:id'} })
    iri: Optional[str] = Field(None, description="""An IRI for an entity. This is determined by the id using expansion rules.""", json_schema_extra = { "linkml_meta": {'alias': 'iri',
         'definition_uri': 'https://w3id.org/biolink/vocab/iri',
         'domain_of': ['attribute',
                       'entity',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['WIKIDATA_PROPERTY:P854'],
         'in_subset': ['translator_minimal', 'samples'],
         'slot_uri': 'biolink:iri'} })
    category: List[Literal["https://w3id.org/biolink/vocab/PhysicalEntity","biolink:PhysicalEntity"]] = Field(["biolink:PhysicalEntity"], description="""Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}. NOTE: The category slot was modified to have a curie range and a pattern for bican categories.""", json_schema_extra = { "linkml_meta": {'alias': 'category',
         'definition_uri': 'https://w3id.org/biolink/vocab/category',
         'designates_type': True,
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'is_a': 'type',
         'is_class_field': True,
         'slot_uri': 'biolink:category'} })
    type: Optional[List[str]] = Field(default_factory=list, json_schema_extra = { "linkml_meta": {'alias': 'type',
         'definition_uri': 'https://w3id.org/biolink/vocab/type',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:type', 'gpi:DB_Object_Type'],
         'mappings': ['rdf:type'],
         'slot_uri': 'rdf:type'} })
    name: Optional[str] = Field(None, description="""A human-readable name for an attribute or entity.""", json_schema_extra = { "linkml_meta": {'alias': 'name',
         'aliases': ['label', 'display name', 'title'],
         'definition_uri': 'https://w3id.org/biolink/vocab/name',
         'domain': 'entity',
         'domain_of': ['attribute',
                       'entity',
                       'macromolecular machine mixin',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene or gene product',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:Name', 'gpi:DB_Object_Name'],
         'in_subset': ['translator_minimal', 'samples'],
         'mappings': ['rdfs:label'],
         'narrow_mappings': ['dct:title', 'WIKIDATA_PROPERTY:P1476'],
         'slot_uri': 'rdfs:label'} })
    description: Optional[str] = Field(None, description="""a human-readable description of an entity""", json_schema_extra = { "linkml_meta": {'alias': 'description',
         'aliases': ['definition'],
         'definition_uri': 'https://w3id.org/biolink/vocab/description',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['IAO:0000115', 'skos:definitions'],
         'in_subset': ['translator_minimal'],
         'mappings': ['dct:description'],
         'narrow_mappings': ['gff3:Description'],
         'slot_uri': 'dct:description'} })
    has_attribute: Optional[List[str]] = Field(None, description="""connects any entity to an attribute""", json_schema_extra = { "linkml_meta": {'alias': 'has_attribute',
         'close_mappings': ['OBI:0001927'],
         'definition_uri': 'https://w3id.org/biolink/vocab/has_attribute',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['SIO:000008'],
         'in_subset': ['samples'],
         'narrow_mappings': ['OBAN:association_has_subject_property',
                             'OBAN:association_has_object_property',
                             'CPT:has_possibly_included_panel_element',
                             'DRUGBANK:category',
                             'EFO:is_executed_in',
                             'HANCESTRO:0301',
                             'LOINC:has_action_guidance',
                             'LOINC:has_adjustment',
                             'LOINC:has_aggregation_view',
                             'LOINC:has_approach_guidance',
                             'LOINC:has_divisor',
                             'LOINC:has_exam',
                             'LOINC:has_method',
                             'LOINC:has_modality_subtype',
                             'LOINC:has_object_guidance',
                             'LOINC:has_scale',
                             'LOINC:has_suffix',
                             'LOINC:has_time_aspect',
                             'LOINC:has_time_modifier',
                             'LOINC:has_timing_of',
                             'NCIT:R88',
                             'NCIT:eo_disease_has_property_or_attribute',
                             'NCIT:has_data_element',
                             'NCIT:has_pharmaceutical_administration_method',
                             'NCIT:has_pharmaceutical_basic_dose_form',
                             'NCIT:has_pharmaceutical_intended_site',
                             'NCIT:has_pharmaceutical_release_characteristics',
                             'NCIT:has_pharmaceutical_state_of_matter',
                             'NCIT:has_pharmaceutical_transformation',
                             'NCIT:is_qualified_by',
                             'NCIT:qualifier_applies_to',
                             'NCIT:role_has_domain',
                             'NCIT:role_has_range',
                             'INO:0000154',
                             'HANCESTRO:0308',
                             'OMIM:has_inheritance_type',
                             'orphanet:C016',
                             'orphanet:C017',
                             'RO:0000053',
                             'RO:0000086',
                             'RO:0000087',
                             'SNOMED:has_access',
                             'SNOMED:has_clinical_course',
                             'SNOMED:has_count_of_base_of_active_ingredient',
                             'SNOMED:has_dose_form_administration_method',
                             'SNOMED:has_dose_form_release_characteristic',
                             'SNOMED:has_dose_form_transformation',
                             'SNOMED:has_finding_context',
                             'SNOMED:has_finding_informer',
                             'SNOMED:has_inherent_attribute',
                             'SNOMED:has_intent',
                             'SNOMED:has_interpretation',
                             'SNOMED:has_laterality',
                             'SNOMED:has_measurement_method',
                             'SNOMED:has_method',
                             'SNOMED:has_priority',
                             'SNOMED:has_procedure_context',
                             'SNOMED:has_process_duration',
                             'SNOMED:has_property',
                             'SNOMED:has_revision_status',
                             'SNOMED:has_scale_type',
                             'SNOMED:has_severity',
                             'SNOMED:has_specimen',
                             'SNOMED:has_state_of_matter',
                             'SNOMED:has_subject_relationship_context',
                             'SNOMED:has_surgical_approach',
                             'SNOMED:has_technique',
                             'SNOMED:has_temporal_context',
                             'SNOMED:has_time_aspect',
                             'SNOMED:has_units',
                             'UMLS:has_structural_class',
                             'UMLS:has_supported_concept_property',
                             'UMLS:has_supported_concept_relationship',
                             'UMLS:may_be_qualified_by'],
         'slot_uri': 'biolink:has_attribute'} })
    deprecated: Optional[bool] = Field(None, description="""A boolean flag indicating that an entity is no longer considered current or valid.""", json_schema_extra = { "linkml_meta": {'alias': 'deprecated',
         'definition_uri': 'https://w3id.org/biolink/vocab/deprecated',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['oboInOwl:ObsoleteClass'],
         'slot_uri': 'biolink:deprecated'} })
    provided_by: Optional[List[str]] = Field(None, description="""The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.""", json_schema_extra = { "linkml_meta": {'alias': 'provided_by',
         'definition_uri': 'https://w3id.org/biolink/vocab/provided_by',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:provided_by'} })
    xref: Optional[List[str]] = Field(default_factory=list, description="""A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.""", json_schema_extra = { "linkml_meta": {'alias': 'xref',
         'aliases': ['dbxref', 'Dbxref', 'DbXref', 'record_url', 'source_record_urls'],
         'definition_uri': 'https://w3id.org/biolink/vocab/xref',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'gene',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'narrow_mappings': ['gff3:Dbxref', 'gpi:DB_Xrefs'],
         'slot_uri': 'biolink:xref'} })
    full_name: Optional[str] = Field(None, description="""a long-form human readable name for a thing""", json_schema_extra = { "linkml_meta": {'alias': 'full_name',
         'definition_uri': 'https://w3id.org/biolink/vocab/full_name',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:full_name'} })
    synonym: Optional[List[str]] = Field(default_factory=list, description="""Alternate human-readable names for a thing""", json_schema_extra = { "linkml_meta": {'alias': 'synonym',
         'aliases': ['alias'],
         'definition_uri': 'https://w3id.org/biolink/vocab/synonym',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'is_a': 'node property',
         'narrow_mappings': ['skos:altLabel',
                             'gff3:Alias',
                             'AGRKB:synonyms',
                             'gpi:DB_Object_Synonyms',
                             'HANCESTRO:0330',
                             'IAO:0000136',
                             'RXNORM:has_tradename'],
         'slot_uri': 'biolink:synonym'} })

    @field_validator('category')
    def pattern_category(cls, v):
        pattern=re.compile(r"^bican:[A-Z][A-Za-z]+$")
        if isinstance(v,list):
            for element in v:
                if not pattern.match(element):
                    raise ValueError(f"Invalid category format: {element}")
        elif isinstance(v,str):
            if not pattern.match(v):
                raise ValueError(f"Invalid category format: {v}")
        return v


class Occurrent(PhysicalEssenceOrOccurrent):
    """
    A processual entity.
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'class_uri': 'biolink:Occurrent',
         'definition_uri': 'https://w3id.org/biolink/vocab/Occurrent',
         'exact_mappings': ['BFO:0000003'],
         'from_schema': 'https://w3id.org/biolink/bican-biolink-schema',
         'mixin': True})

    pass


class ActivityAndBehavior(Occurrent):
    """
    Activity or behavior of any independent integral living, organization or mechanical actor in the world
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'class_uri': 'biolink:ActivityAndBehavior',
         'definition_uri': 'https://w3id.org/biolink/vocab/ActivityAndBehavior',
         'exact_mappings': ['UMLSSG:ACTI'],
         'from_schema': 'https://w3id.org/biolink/bican-biolink-schema',
         'mixin': True})

    pass


class Activity(ActivityAndBehavior, NamedThing):
    """
    An activity is something that occurs over a period of time and acts upon or with entities; it may include consuming, processing, transforming, modifying, relocating, using, or generating entities.
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'class_uri': 'biolink:Activity',
         'definition_uri': 'https://w3id.org/biolink/vocab/Activity',
         'exact_mappings': ['prov:Activity', 'NCIT:C43431', 'STY:T052'],
         'from_schema': 'https://w3id.org/biolink/bican-biolink-schema',
         'mixins': ['ActivityAndBehavior'],
         'narrow_mappings': ['STY:T056',
                             'STY:T057',
                             'STY:T064',
                             'STY:T066',
                             'STY:T062',
                             'STY:T065',
                             'STY:T058']})

    id: str = Field(..., description="""A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI""", json_schema_extra = { "linkml_meta": {'alias': 'id',
         'definition_uri': 'https://w3id.org/biolink/vocab/id',
         'domain': 'entity',
         'domain_of': ['ontology class',
                       'entity',
                       'attribute',
                       'named thing',
                       'taxonomic rank',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['AGRKB:primaryId', 'gff3:ID', 'gpi:DB_Object_ID'],
         'in_subset': ['translator_minimal'],
         'slot_uri': 'biolink:id'} })
    iri: Optional[str] = Field(None, description="""An IRI for an entity. This is determined by the id using expansion rules.""", json_schema_extra = { "linkml_meta": {'alias': 'iri',
         'definition_uri': 'https://w3id.org/biolink/vocab/iri',
         'domain_of': ['attribute',
                       'entity',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['WIKIDATA_PROPERTY:P854'],
         'in_subset': ['translator_minimal', 'samples'],
         'slot_uri': 'biolink:iri'} })
    category: List[Literal["https://w3id.org/biolink/vocab/Activity","biolink:Activity"]] = Field(["biolink:Activity"], description="""Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}. NOTE: The category slot was modified to have a curie range and a pattern for bican categories.""", json_schema_extra = { "linkml_meta": {'alias': 'category',
         'definition_uri': 'https://w3id.org/biolink/vocab/category',
         'designates_type': True,
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'is_a': 'type',
         'is_class_field': True,
         'slot_uri': 'biolink:category'} })
    type: Optional[List[str]] = Field(default_factory=list, json_schema_extra = { "linkml_meta": {'alias': 'type',
         'definition_uri': 'https://w3id.org/biolink/vocab/type',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:type', 'gpi:DB_Object_Type'],
         'mappings': ['rdf:type'],
         'slot_uri': 'rdf:type'} })
    name: Optional[str] = Field(None, description="""A human-readable name for an attribute or entity.""", json_schema_extra = { "linkml_meta": {'alias': 'name',
         'aliases': ['label', 'display name', 'title'],
         'definition_uri': 'https://w3id.org/biolink/vocab/name',
         'domain': 'entity',
         'domain_of': ['attribute',
                       'entity',
                       'macromolecular machine mixin',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene or gene product',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:Name', 'gpi:DB_Object_Name'],
         'in_subset': ['translator_minimal', 'samples'],
         'mappings': ['rdfs:label'],
         'narrow_mappings': ['dct:title', 'WIKIDATA_PROPERTY:P1476'],
         'slot_uri': 'rdfs:label'} })
    description: Optional[str] = Field(None, description="""a human-readable description of an entity""", json_schema_extra = { "linkml_meta": {'alias': 'description',
         'aliases': ['definition'],
         'definition_uri': 'https://w3id.org/biolink/vocab/description',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['IAO:0000115', 'skos:definitions'],
         'in_subset': ['translator_minimal'],
         'mappings': ['dct:description'],
         'narrow_mappings': ['gff3:Description'],
         'slot_uri': 'dct:description'} })
    has_attribute: Optional[List[str]] = Field(None, description="""connects any entity to an attribute""", json_schema_extra = { "linkml_meta": {'alias': 'has_attribute',
         'close_mappings': ['OBI:0001927'],
         'definition_uri': 'https://w3id.org/biolink/vocab/has_attribute',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['SIO:000008'],
         'in_subset': ['samples'],
         'narrow_mappings': ['OBAN:association_has_subject_property',
                             'OBAN:association_has_object_property',
                             'CPT:has_possibly_included_panel_element',
                             'DRUGBANK:category',
                             'EFO:is_executed_in',
                             'HANCESTRO:0301',
                             'LOINC:has_action_guidance',
                             'LOINC:has_adjustment',
                             'LOINC:has_aggregation_view',
                             'LOINC:has_approach_guidance',
                             'LOINC:has_divisor',
                             'LOINC:has_exam',
                             'LOINC:has_method',
                             'LOINC:has_modality_subtype',
                             'LOINC:has_object_guidance',
                             'LOINC:has_scale',
                             'LOINC:has_suffix',
                             'LOINC:has_time_aspect',
                             'LOINC:has_time_modifier',
                             'LOINC:has_timing_of',
                             'NCIT:R88',
                             'NCIT:eo_disease_has_property_or_attribute',
                             'NCIT:has_data_element',
                             'NCIT:has_pharmaceutical_administration_method',
                             'NCIT:has_pharmaceutical_basic_dose_form',
                             'NCIT:has_pharmaceutical_intended_site',
                             'NCIT:has_pharmaceutical_release_characteristics',
                             'NCIT:has_pharmaceutical_state_of_matter',
                             'NCIT:has_pharmaceutical_transformation',
                             'NCIT:is_qualified_by',
                             'NCIT:qualifier_applies_to',
                             'NCIT:role_has_domain',
                             'NCIT:role_has_range',
                             'INO:0000154',
                             'HANCESTRO:0308',
                             'OMIM:has_inheritance_type',
                             'orphanet:C016',
                             'orphanet:C017',
                             'RO:0000053',
                             'RO:0000086',
                             'RO:0000087',
                             'SNOMED:has_access',
                             'SNOMED:has_clinical_course',
                             'SNOMED:has_count_of_base_of_active_ingredient',
                             'SNOMED:has_dose_form_administration_method',
                             'SNOMED:has_dose_form_release_characteristic',
                             'SNOMED:has_dose_form_transformation',
                             'SNOMED:has_finding_context',
                             'SNOMED:has_finding_informer',
                             'SNOMED:has_inherent_attribute',
                             'SNOMED:has_intent',
                             'SNOMED:has_interpretation',
                             'SNOMED:has_laterality',
                             'SNOMED:has_measurement_method',
                             'SNOMED:has_method',
                             'SNOMED:has_priority',
                             'SNOMED:has_procedure_context',
                             'SNOMED:has_process_duration',
                             'SNOMED:has_property',
                             'SNOMED:has_revision_status',
                             'SNOMED:has_scale_type',
                             'SNOMED:has_severity',
                             'SNOMED:has_specimen',
                             'SNOMED:has_state_of_matter',
                             'SNOMED:has_subject_relationship_context',
                             'SNOMED:has_surgical_approach',
                             'SNOMED:has_technique',
                             'SNOMED:has_temporal_context',
                             'SNOMED:has_time_aspect',
                             'SNOMED:has_units',
                             'UMLS:has_structural_class',
                             'UMLS:has_supported_concept_property',
                             'UMLS:has_supported_concept_relationship',
                             'UMLS:may_be_qualified_by'],
         'slot_uri': 'biolink:has_attribute'} })
    deprecated: Optional[bool] = Field(None, description="""A boolean flag indicating that an entity is no longer considered current or valid.""", json_schema_extra = { "linkml_meta": {'alias': 'deprecated',
         'definition_uri': 'https://w3id.org/biolink/vocab/deprecated',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['oboInOwl:ObsoleteClass'],
         'slot_uri': 'biolink:deprecated'} })
    provided_by: Optional[List[str]] = Field(None, description="""The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.""", json_schema_extra = { "linkml_meta": {'alias': 'provided_by',
         'definition_uri': 'https://w3id.org/biolink/vocab/provided_by',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:provided_by'} })
    xref: Optional[List[str]] = Field(default_factory=list, description="""A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.""", json_schema_extra = { "linkml_meta": {'alias': 'xref',
         'aliases': ['dbxref', 'Dbxref', 'DbXref', 'record_url', 'source_record_urls'],
         'definition_uri': 'https://w3id.org/biolink/vocab/xref',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'gene',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'narrow_mappings': ['gff3:Dbxref', 'gpi:DB_Xrefs'],
         'slot_uri': 'biolink:xref'} })
    full_name: Optional[str] = Field(None, description="""a long-form human readable name for a thing""", json_schema_extra = { "linkml_meta": {'alias': 'full_name',
         'definition_uri': 'https://w3id.org/biolink/vocab/full_name',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:full_name'} })
    synonym: Optional[List[str]] = Field(default_factory=list, description="""Alternate human-readable names for a thing""", json_schema_extra = { "linkml_meta": {'alias': 'synonym',
         'aliases': ['alias'],
         'definition_uri': 'https://w3id.org/biolink/vocab/synonym',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'is_a': 'node property',
         'narrow_mappings': ['skos:altLabel',
                             'gff3:Alias',
                             'AGRKB:synonyms',
                             'gpi:DB_Object_Synonyms',
                             'HANCESTRO:0330',
                             'IAO:0000136',
                             'RXNORM:has_tradename'],
         'slot_uri': 'biolink:synonym'} })

    @field_validator('category')
    def pattern_category(cls, v):
        pattern=re.compile(r"^bican:[A-Z][A-Za-z]+$")
        if isinstance(v,list):
            for element in v:
                if not pattern.match(element):
                    raise ValueError(f"Invalid category format: {element}")
        elif isinstance(v,str):
            if not pattern.match(v):
                raise ValueError(f"Invalid category format: {v}")
        return v


class Procedure(ActivityAndBehavior, NamedThing):
    """
    A series of actions conducted in a certain order or manner
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'class_uri': 'biolink:Procedure',
         'definition_uri': 'https://w3id.org/biolink/vocab/Procedure',
         'exact_mappings': ['UMLSSG:PROC', 'dcid:MedicalProcedure'],
         'from_schema': 'https://w3id.org/biolink/bican-biolink-schema',
         'id_prefixes': ['CPT'],
         'mixins': ['ActivityAndBehavior'],
         'narrow_mappings': ['STY:T059', 'STY:T060', 'STY:T061', 'STY:T063']})

    id: str = Field(..., description="""A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI""", json_schema_extra = { "linkml_meta": {'alias': 'id',
         'definition_uri': 'https://w3id.org/biolink/vocab/id',
         'domain': 'entity',
         'domain_of': ['ontology class',
                       'entity',
                       'attribute',
                       'named thing',
                       'taxonomic rank',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['AGRKB:primaryId', 'gff3:ID', 'gpi:DB_Object_ID'],
         'in_subset': ['translator_minimal'],
         'slot_uri': 'biolink:id'} })
    iri: Optional[str] = Field(None, description="""An IRI for an entity. This is determined by the id using expansion rules.""", json_schema_extra = { "linkml_meta": {'alias': 'iri',
         'definition_uri': 'https://w3id.org/biolink/vocab/iri',
         'domain_of': ['attribute',
                       'entity',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['WIKIDATA_PROPERTY:P854'],
         'in_subset': ['translator_minimal', 'samples'],
         'slot_uri': 'biolink:iri'} })
    category: List[Literal["https://w3id.org/biolink/vocab/Procedure","biolink:Procedure"]] = Field(["biolink:Procedure"], description="""Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}. NOTE: The category slot was modified to have a curie range and a pattern for bican categories.""", json_schema_extra = { "linkml_meta": {'alias': 'category',
         'definition_uri': 'https://w3id.org/biolink/vocab/category',
         'designates_type': True,
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'is_a': 'type',
         'is_class_field': True,
         'slot_uri': 'biolink:category'} })
    type: Optional[List[str]] = Field(default_factory=list, json_schema_extra = { "linkml_meta": {'alias': 'type',
         'definition_uri': 'https://w3id.org/biolink/vocab/type',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:type', 'gpi:DB_Object_Type'],
         'mappings': ['rdf:type'],
         'slot_uri': 'rdf:type'} })
    name: Optional[str] = Field(None, description="""A human-readable name for an attribute or entity.""", json_schema_extra = { "linkml_meta": {'alias': 'name',
         'aliases': ['label', 'display name', 'title'],
         'definition_uri': 'https://w3id.org/biolink/vocab/name',
         'domain': 'entity',
         'domain_of': ['attribute',
                       'entity',
                       'macromolecular machine mixin',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene or gene product',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:Name', 'gpi:DB_Object_Name'],
         'in_subset': ['translator_minimal', 'samples'],
         'mappings': ['rdfs:label'],
         'narrow_mappings': ['dct:title', 'WIKIDATA_PROPERTY:P1476'],
         'slot_uri': 'rdfs:label'} })
    description: Optional[str] = Field(None, description="""a human-readable description of an entity""", json_schema_extra = { "linkml_meta": {'alias': 'description',
         'aliases': ['definition'],
         'definition_uri': 'https://w3id.org/biolink/vocab/description',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['IAO:0000115', 'skos:definitions'],
         'in_subset': ['translator_minimal'],
         'mappings': ['dct:description'],
         'narrow_mappings': ['gff3:Description'],
         'slot_uri': 'dct:description'} })
    has_attribute: Optional[List[str]] = Field(None, description="""connects any entity to an attribute""", json_schema_extra = { "linkml_meta": {'alias': 'has_attribute',
         'close_mappings': ['OBI:0001927'],
         'definition_uri': 'https://w3id.org/biolink/vocab/has_attribute',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['SIO:000008'],
         'in_subset': ['samples'],
         'narrow_mappings': ['OBAN:association_has_subject_property',
                             'OBAN:association_has_object_property',
                             'CPT:has_possibly_included_panel_element',
                             'DRUGBANK:category',
                             'EFO:is_executed_in',
                             'HANCESTRO:0301',
                             'LOINC:has_action_guidance',
                             'LOINC:has_adjustment',
                             'LOINC:has_aggregation_view',
                             'LOINC:has_approach_guidance',
                             'LOINC:has_divisor',
                             'LOINC:has_exam',
                             'LOINC:has_method',
                             'LOINC:has_modality_subtype',
                             'LOINC:has_object_guidance',
                             'LOINC:has_scale',
                             'LOINC:has_suffix',
                             'LOINC:has_time_aspect',
                             'LOINC:has_time_modifier',
                             'LOINC:has_timing_of',
                             'NCIT:R88',
                             'NCIT:eo_disease_has_property_or_attribute',
                             'NCIT:has_data_element',
                             'NCIT:has_pharmaceutical_administration_method',
                             'NCIT:has_pharmaceutical_basic_dose_form',
                             'NCIT:has_pharmaceutical_intended_site',
                             'NCIT:has_pharmaceutical_release_characteristics',
                             'NCIT:has_pharmaceutical_state_of_matter',
                             'NCIT:has_pharmaceutical_transformation',
                             'NCIT:is_qualified_by',
                             'NCIT:qualifier_applies_to',
                             'NCIT:role_has_domain',
                             'NCIT:role_has_range',
                             'INO:0000154',
                             'HANCESTRO:0308',
                             'OMIM:has_inheritance_type',
                             'orphanet:C016',
                             'orphanet:C017',
                             'RO:0000053',
                             'RO:0000086',
                             'RO:0000087',
                             'SNOMED:has_access',
                             'SNOMED:has_clinical_course',
                             'SNOMED:has_count_of_base_of_active_ingredient',
                             'SNOMED:has_dose_form_administration_method',
                             'SNOMED:has_dose_form_release_characteristic',
                             'SNOMED:has_dose_form_transformation',
                             'SNOMED:has_finding_context',
                             'SNOMED:has_finding_informer',
                             'SNOMED:has_inherent_attribute',
                             'SNOMED:has_intent',
                             'SNOMED:has_interpretation',
                             'SNOMED:has_laterality',
                             'SNOMED:has_measurement_method',
                             'SNOMED:has_method',
                             'SNOMED:has_priority',
                             'SNOMED:has_procedure_context',
                             'SNOMED:has_process_duration',
                             'SNOMED:has_property',
                             'SNOMED:has_revision_status',
                             'SNOMED:has_scale_type',
                             'SNOMED:has_severity',
                             'SNOMED:has_specimen',
                             'SNOMED:has_state_of_matter',
                             'SNOMED:has_subject_relationship_context',
                             'SNOMED:has_surgical_approach',
                             'SNOMED:has_technique',
                             'SNOMED:has_temporal_context',
                             'SNOMED:has_time_aspect',
                             'SNOMED:has_units',
                             'UMLS:has_structural_class',
                             'UMLS:has_supported_concept_property',
                             'UMLS:has_supported_concept_relationship',
                             'UMLS:may_be_qualified_by'],
         'slot_uri': 'biolink:has_attribute'} })
    deprecated: Optional[bool] = Field(None, description="""A boolean flag indicating that an entity is no longer considered current or valid.""", json_schema_extra = { "linkml_meta": {'alias': 'deprecated',
         'definition_uri': 'https://w3id.org/biolink/vocab/deprecated',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['oboInOwl:ObsoleteClass'],
         'slot_uri': 'biolink:deprecated'} })
    provided_by: Optional[List[str]] = Field(None, description="""The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.""", json_schema_extra = { "linkml_meta": {'alias': 'provided_by',
         'definition_uri': 'https://w3id.org/biolink/vocab/provided_by',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:provided_by'} })
    xref: Optional[List[str]] = Field(default_factory=list, description="""A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.""", json_schema_extra = { "linkml_meta": {'alias': 'xref',
         'aliases': ['dbxref', 'Dbxref', 'DbXref', 'record_url', 'source_record_urls'],
         'definition_uri': 'https://w3id.org/biolink/vocab/xref',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'gene',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'narrow_mappings': ['gff3:Dbxref', 'gpi:DB_Xrefs'],
         'slot_uri': 'biolink:xref'} })
    full_name: Optional[str] = Field(None, description="""a long-form human readable name for a thing""", json_schema_extra = { "linkml_meta": {'alias': 'full_name',
         'definition_uri': 'https://w3id.org/biolink/vocab/full_name',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:full_name'} })
    synonym: Optional[List[str]] = Field(default_factory=list, description="""Alternate human-readable names for a thing""", json_schema_extra = { "linkml_meta": {'alias': 'synonym',
         'aliases': ['alias'],
         'definition_uri': 'https://w3id.org/biolink/vocab/synonym',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'is_a': 'node property',
         'narrow_mappings': ['skos:altLabel',
                             'gff3:Alias',
                             'AGRKB:synonyms',
                             'gpi:DB_Object_Synonyms',
                             'HANCESTRO:0330',
                             'IAO:0000136',
                             'RXNORM:has_tradename'],
         'slot_uri': 'biolink:synonym'} })

    @field_validator('category')
    def pattern_category(cls, v):
        pattern=re.compile(r"^bican:[A-Z][A-Za-z]+$")
        if isinstance(v,list):
            for element in v:
                if not pattern.match(element):
                    raise ValueError(f"Invalid category format: {element}")
        elif isinstance(v,str):
            if not pattern.match(v):
                raise ValueError(f"Invalid category format: {v}")
        return v


class SubjectOfInvestigation(ConfiguredBaseModel):
    """
    An entity that has the role of being studied in an investigation, study, or experiment
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'class_uri': 'biolink:SubjectOfInvestigation',
         'definition_uri': 'https://w3id.org/biolink/vocab/SubjectOfInvestigation',
         'from_schema': 'https://w3id.org/biolink/bican-biolink-schema',
         'mixin': True})

    pass


class MaterialSample(SubjectOfInvestigation, PhysicalEntity):
    """
    A sample is a limited quantity of something (e.g. an individual or set of individuals from a population, or a portion of a substance) to be used for testing, analysis, inspection, investigation, demonstration, or trial use. [SIO]
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'aliases': ['biospecimen', 'sample', 'biosample', 'physical sample'],
         'class_uri': 'biolink:MaterialSample',
         'definition_uri': 'https://w3id.org/biolink/vocab/MaterialSample',
         'exact_mappings': ['OBI:0000747', 'SIO:001050'],
         'from_schema': 'https://w3id.org/biolink/bican-biolink-schema',
         'id_prefixes': ['BIOSAMPLE', 'GOLD.META'],
         'mixins': ['SubjectOfInvestigation']})

    id: str = Field(..., description="""A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI""", json_schema_extra = { "linkml_meta": {'alias': 'id',
         'definition_uri': 'https://w3id.org/biolink/vocab/id',
         'domain': 'entity',
         'domain_of': ['ontology class',
                       'entity',
                       'attribute',
                       'named thing',
                       'taxonomic rank',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['AGRKB:primaryId', 'gff3:ID', 'gpi:DB_Object_ID'],
         'in_subset': ['translator_minimal'],
         'slot_uri': 'biolink:id'} })
    iri: Optional[str] = Field(None, description="""An IRI for an entity. This is determined by the id using expansion rules.""", json_schema_extra = { "linkml_meta": {'alias': 'iri',
         'definition_uri': 'https://w3id.org/biolink/vocab/iri',
         'domain_of': ['attribute',
                       'entity',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['WIKIDATA_PROPERTY:P854'],
         'in_subset': ['translator_minimal', 'samples'],
         'slot_uri': 'biolink:iri'} })
    category: List[Literal["https://w3id.org/biolink/vocab/MaterialSample","biolink:MaterialSample"]] = Field(["biolink:MaterialSample"], description="""Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}. NOTE: The category slot was modified to have a curie range and a pattern for bican categories.""", json_schema_extra = { "linkml_meta": {'alias': 'category',
         'definition_uri': 'https://w3id.org/biolink/vocab/category',
         'designates_type': True,
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'is_a': 'type',
         'is_class_field': True,
         'slot_uri': 'biolink:category'} })
    type: Optional[List[str]] = Field(default_factory=list, json_schema_extra = { "linkml_meta": {'alias': 'type',
         'definition_uri': 'https://w3id.org/biolink/vocab/type',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:type', 'gpi:DB_Object_Type'],
         'mappings': ['rdf:type'],
         'slot_uri': 'rdf:type'} })
    name: Optional[str] = Field(None, description="""A human-readable name for an attribute or entity.""", json_schema_extra = { "linkml_meta": {'alias': 'name',
         'aliases': ['label', 'display name', 'title'],
         'definition_uri': 'https://w3id.org/biolink/vocab/name',
         'domain': 'entity',
         'domain_of': ['attribute',
                       'entity',
                       'macromolecular machine mixin',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene or gene product',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:Name', 'gpi:DB_Object_Name'],
         'in_subset': ['translator_minimal', 'samples'],
         'mappings': ['rdfs:label'],
         'narrow_mappings': ['dct:title', 'WIKIDATA_PROPERTY:P1476'],
         'slot_uri': 'rdfs:label'} })
    description: Optional[str] = Field(None, description="""a human-readable description of an entity""", json_schema_extra = { "linkml_meta": {'alias': 'description',
         'aliases': ['definition'],
         'definition_uri': 'https://w3id.org/biolink/vocab/description',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['IAO:0000115', 'skos:definitions'],
         'in_subset': ['translator_minimal'],
         'mappings': ['dct:description'],
         'narrow_mappings': ['gff3:Description'],
         'slot_uri': 'dct:description'} })
    has_attribute: Optional[List[str]] = Field(None, description="""connects any entity to an attribute""", json_schema_extra = { "linkml_meta": {'alias': 'has_attribute',
         'close_mappings': ['OBI:0001927'],
         'definition_uri': 'https://w3id.org/biolink/vocab/has_attribute',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['SIO:000008'],
         'in_subset': ['samples'],
         'narrow_mappings': ['OBAN:association_has_subject_property',
                             'OBAN:association_has_object_property',
                             'CPT:has_possibly_included_panel_element',
                             'DRUGBANK:category',
                             'EFO:is_executed_in',
                             'HANCESTRO:0301',
                             'LOINC:has_action_guidance',
                             'LOINC:has_adjustment',
                             'LOINC:has_aggregation_view',
                             'LOINC:has_approach_guidance',
                             'LOINC:has_divisor',
                             'LOINC:has_exam',
                             'LOINC:has_method',
                             'LOINC:has_modality_subtype',
                             'LOINC:has_object_guidance',
                             'LOINC:has_scale',
                             'LOINC:has_suffix',
                             'LOINC:has_time_aspect',
                             'LOINC:has_time_modifier',
                             'LOINC:has_timing_of',
                             'NCIT:R88',
                             'NCIT:eo_disease_has_property_or_attribute',
                             'NCIT:has_data_element',
                             'NCIT:has_pharmaceutical_administration_method',
                             'NCIT:has_pharmaceutical_basic_dose_form',
                             'NCIT:has_pharmaceutical_intended_site',
                             'NCIT:has_pharmaceutical_release_characteristics',
                             'NCIT:has_pharmaceutical_state_of_matter',
                             'NCIT:has_pharmaceutical_transformation',
                             'NCIT:is_qualified_by',
                             'NCIT:qualifier_applies_to',
                             'NCIT:role_has_domain',
                             'NCIT:role_has_range',
                             'INO:0000154',
                             'HANCESTRO:0308',
                             'OMIM:has_inheritance_type',
                             'orphanet:C016',
                             'orphanet:C017',
                             'RO:0000053',
                             'RO:0000086',
                             'RO:0000087',
                             'SNOMED:has_access',
                             'SNOMED:has_clinical_course',
                             'SNOMED:has_count_of_base_of_active_ingredient',
                             'SNOMED:has_dose_form_administration_method',
                             'SNOMED:has_dose_form_release_characteristic',
                             'SNOMED:has_dose_form_transformation',
                             'SNOMED:has_finding_context',
                             'SNOMED:has_finding_informer',
                             'SNOMED:has_inherent_attribute',
                             'SNOMED:has_intent',
                             'SNOMED:has_interpretation',
                             'SNOMED:has_laterality',
                             'SNOMED:has_measurement_method',
                             'SNOMED:has_method',
                             'SNOMED:has_priority',
                             'SNOMED:has_procedure_context',
                             'SNOMED:has_process_duration',
                             'SNOMED:has_property',
                             'SNOMED:has_revision_status',
                             'SNOMED:has_scale_type',
                             'SNOMED:has_severity',
                             'SNOMED:has_specimen',
                             'SNOMED:has_state_of_matter',
                             'SNOMED:has_subject_relationship_context',
                             'SNOMED:has_surgical_approach',
                             'SNOMED:has_technique',
                             'SNOMED:has_temporal_context',
                             'SNOMED:has_time_aspect',
                             'SNOMED:has_units',
                             'UMLS:has_structural_class',
                             'UMLS:has_supported_concept_property',
                             'UMLS:has_supported_concept_relationship',
                             'UMLS:may_be_qualified_by'],
         'slot_uri': 'biolink:has_attribute'} })
    deprecated: Optional[bool] = Field(None, description="""A boolean flag indicating that an entity is no longer considered current or valid.""", json_schema_extra = { "linkml_meta": {'alias': 'deprecated',
         'definition_uri': 'https://w3id.org/biolink/vocab/deprecated',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['oboInOwl:ObsoleteClass'],
         'slot_uri': 'biolink:deprecated'} })
    provided_by: Optional[List[str]] = Field(None, description="""The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.""", json_schema_extra = { "linkml_meta": {'alias': 'provided_by',
         'definition_uri': 'https://w3id.org/biolink/vocab/provided_by',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:provided_by'} })
    xref: Optional[List[str]] = Field(default_factory=list, description="""A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.""", json_schema_extra = { "linkml_meta": {'alias': 'xref',
         'aliases': ['dbxref', 'Dbxref', 'DbXref', 'record_url', 'source_record_urls'],
         'definition_uri': 'https://w3id.org/biolink/vocab/xref',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'gene',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'narrow_mappings': ['gff3:Dbxref', 'gpi:DB_Xrefs'],
         'slot_uri': 'biolink:xref'} })
    full_name: Optional[str] = Field(None, description="""a long-form human readable name for a thing""", json_schema_extra = { "linkml_meta": {'alias': 'full_name',
         'definition_uri': 'https://w3id.org/biolink/vocab/full_name',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:full_name'} })
    synonym: Optional[List[str]] = Field(default_factory=list, description="""Alternate human-readable names for a thing""", json_schema_extra = { "linkml_meta": {'alias': 'synonym',
         'aliases': ['alias'],
         'definition_uri': 'https://w3id.org/biolink/vocab/synonym',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'is_a': 'node property',
         'narrow_mappings': ['skos:altLabel',
                             'gff3:Alias',
                             'AGRKB:synonyms',
                             'gpi:DB_Object_Synonyms',
                             'HANCESTRO:0330',
                             'IAO:0000136',
                             'RXNORM:has_tradename'],
         'slot_uri': 'biolink:synonym'} })

    @field_validator('category')
    def pattern_category(cls, v):
        pattern=re.compile(r"^bican:[A-Z][A-Za-z]+$")
        if isinstance(v,list):
            for element in v:
                if not pattern.match(element):
                    raise ValueError(f"Invalid category format: {element}")
        elif isinstance(v,str):
            if not pattern.match(v):
                raise ValueError(f"Invalid category format: {v}")
        return v


class ThingWithTaxon(ConfiguredBaseModel):
    """
    A mixin that can be used on any entity that can be taxonomically classified. This includes individual organisms; genes, their products and other molecular entities; body parts; biological processes
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'class_uri': 'biolink:ThingWithTaxon',
         'definition_uri': 'https://w3id.org/biolink/vocab/ThingWithTaxon',
         'from_schema': 'https://w3id.org/biolink/bican-biolink-schema',
         'mixin': True})

    in_taxon: Optional[List[str]] = Field(None, description="""connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'""", json_schema_extra = { "linkml_meta": {'alias': 'in_taxon',
         'aliases': ['instance of',
                     'is organism source of gene product',
                     'organism has gene',
                     'gene found in organism',
                     'gene product has organism source'],
         'definition_uri': 'https://w3id.org/biolink/vocab/in_taxon',
         'domain': 'thing with taxon',
         'domain_of': ['thing with taxon', 'biological entity', 'gene', 'genome'],
         'exact_mappings': ['RO:0002162', 'WIKIDATA_PROPERTY:P703'],
         'in_subset': ['translator_minimal'],
         'inherited': True,
         'is_a': 'related to at instance level',
         'narrow_mappings': ['RO:0002160'],
         'slot_uri': 'biolink:in_taxon'} })
    in_taxon_label: Optional[str] = Field(None, description="""The human readable scientific name for the taxon of the entity.""", json_schema_extra = { "linkml_meta": {'alias': 'in_taxon_label',
         'definition_uri': 'https://w3id.org/biolink/vocab/in_taxon_label',
         'domain': 'thing with taxon',
         'domain_of': ['thing with taxon', 'biological entity', 'gene', 'genome'],
         'exact_mappings': ['WIKIDATA_PROPERTY:P225'],
         'in_subset': ['translator_minimal'],
         'is_a': 'node property',
         'slot_uri': 'biolink:in_taxon_label'} })


class BiologicalEntity(ThingWithTaxon, NamedThing):
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'abstract': True,
         'aliases': ['bioentity'],
         'class_uri': 'biolink:BiologicalEntity',
         'definition_uri': 'https://w3id.org/biolink/vocab/BiologicalEntity',
         'from_schema': 'https://w3id.org/biolink/bican-biolink-schema',
         'mixins': ['ThingWithTaxon'],
         'narrow_mappings': ['WIKIDATA:Q28845870',
                             'STY:T050',
                             'SIO:010046',
                             'STY:T129']})

    id: str = Field(..., description="""A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI""", json_schema_extra = { "linkml_meta": {'alias': 'id',
         'definition_uri': 'https://w3id.org/biolink/vocab/id',
         'domain': 'entity',
         'domain_of': ['ontology class',
                       'entity',
                       'attribute',
                       'named thing',
                       'taxonomic rank',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['AGRKB:primaryId', 'gff3:ID', 'gpi:DB_Object_ID'],
         'in_subset': ['translator_minimal'],
         'slot_uri': 'biolink:id'} })
    iri: Optional[str] = Field(None, description="""An IRI for an entity. This is determined by the id using expansion rules.""", json_schema_extra = { "linkml_meta": {'alias': 'iri',
         'definition_uri': 'https://w3id.org/biolink/vocab/iri',
         'domain_of': ['attribute',
                       'entity',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['WIKIDATA_PROPERTY:P854'],
         'in_subset': ['translator_minimal', 'samples'],
         'slot_uri': 'biolink:iri'} })
    category: List[Literal["https://w3id.org/biolink/vocab/BiologicalEntity","biolink:BiologicalEntity"]] = Field(["biolink:BiologicalEntity"], description="""Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}. NOTE: The category slot was modified to have a curie range and a pattern for bican categories.""", json_schema_extra = { "linkml_meta": {'alias': 'category',
         'definition_uri': 'https://w3id.org/biolink/vocab/category',
         'designates_type': True,
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'is_a': 'type',
         'is_class_field': True,
         'slot_uri': 'biolink:category'} })
    type: Optional[List[str]] = Field(default_factory=list, json_schema_extra = { "linkml_meta": {'alias': 'type',
         'definition_uri': 'https://w3id.org/biolink/vocab/type',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:type', 'gpi:DB_Object_Type'],
         'mappings': ['rdf:type'],
         'slot_uri': 'rdf:type'} })
    name: Optional[str] = Field(None, description="""A human-readable name for an attribute or entity.""", json_schema_extra = { "linkml_meta": {'alias': 'name',
         'aliases': ['label', 'display name', 'title'],
         'definition_uri': 'https://w3id.org/biolink/vocab/name',
         'domain': 'entity',
         'domain_of': ['attribute',
                       'entity',
                       'macromolecular machine mixin',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene or gene product',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:Name', 'gpi:DB_Object_Name'],
         'in_subset': ['translator_minimal', 'samples'],
         'mappings': ['rdfs:label'],
         'narrow_mappings': ['dct:title', 'WIKIDATA_PROPERTY:P1476'],
         'slot_uri': 'rdfs:label'} })
    description: Optional[str] = Field(None, description="""a human-readable description of an entity""", json_schema_extra = { "linkml_meta": {'alias': 'description',
         'aliases': ['definition'],
         'definition_uri': 'https://w3id.org/biolink/vocab/description',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['IAO:0000115', 'skos:definitions'],
         'in_subset': ['translator_minimal'],
         'mappings': ['dct:description'],
         'narrow_mappings': ['gff3:Description'],
         'slot_uri': 'dct:description'} })
    has_attribute: Optional[List[str]] = Field(None, description="""connects any entity to an attribute""", json_schema_extra = { "linkml_meta": {'alias': 'has_attribute',
         'close_mappings': ['OBI:0001927'],
         'definition_uri': 'https://w3id.org/biolink/vocab/has_attribute',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['SIO:000008'],
         'in_subset': ['samples'],
         'narrow_mappings': ['OBAN:association_has_subject_property',
                             'OBAN:association_has_object_property',
                             'CPT:has_possibly_included_panel_element',
                             'DRUGBANK:category',
                             'EFO:is_executed_in',
                             'HANCESTRO:0301',
                             'LOINC:has_action_guidance',
                             'LOINC:has_adjustment',
                             'LOINC:has_aggregation_view',
                             'LOINC:has_approach_guidance',
                             'LOINC:has_divisor',
                             'LOINC:has_exam',
                             'LOINC:has_method',
                             'LOINC:has_modality_subtype',
                             'LOINC:has_object_guidance',
                             'LOINC:has_scale',
                             'LOINC:has_suffix',
                             'LOINC:has_time_aspect',
                             'LOINC:has_time_modifier',
                             'LOINC:has_timing_of',
                             'NCIT:R88',
                             'NCIT:eo_disease_has_property_or_attribute',
                             'NCIT:has_data_element',
                             'NCIT:has_pharmaceutical_administration_method',
                             'NCIT:has_pharmaceutical_basic_dose_form',
                             'NCIT:has_pharmaceutical_intended_site',
                             'NCIT:has_pharmaceutical_release_characteristics',
                             'NCIT:has_pharmaceutical_state_of_matter',
                             'NCIT:has_pharmaceutical_transformation',
                             'NCIT:is_qualified_by',
                             'NCIT:qualifier_applies_to',
                             'NCIT:role_has_domain',
                             'NCIT:role_has_range',
                             'INO:0000154',
                             'HANCESTRO:0308',
                             'OMIM:has_inheritance_type',
                             'orphanet:C016',
                             'orphanet:C017',
                             'RO:0000053',
                             'RO:0000086',
                             'RO:0000087',
                             'SNOMED:has_access',
                             'SNOMED:has_clinical_course',
                             'SNOMED:has_count_of_base_of_active_ingredient',
                             'SNOMED:has_dose_form_administration_method',
                             'SNOMED:has_dose_form_release_characteristic',
                             'SNOMED:has_dose_form_transformation',
                             'SNOMED:has_finding_context',
                             'SNOMED:has_finding_informer',
                             'SNOMED:has_inherent_attribute',
                             'SNOMED:has_intent',
                             'SNOMED:has_interpretation',
                             'SNOMED:has_laterality',
                             'SNOMED:has_measurement_method',
                             'SNOMED:has_method',
                             'SNOMED:has_priority',
                             'SNOMED:has_procedure_context',
                             'SNOMED:has_process_duration',
                             'SNOMED:has_property',
                             'SNOMED:has_revision_status',
                             'SNOMED:has_scale_type',
                             'SNOMED:has_severity',
                             'SNOMED:has_specimen',
                             'SNOMED:has_state_of_matter',
                             'SNOMED:has_subject_relationship_context',
                             'SNOMED:has_surgical_approach',
                             'SNOMED:has_technique',
                             'SNOMED:has_temporal_context',
                             'SNOMED:has_time_aspect',
                             'SNOMED:has_units',
                             'UMLS:has_structural_class',
                             'UMLS:has_supported_concept_property',
                             'UMLS:has_supported_concept_relationship',
                             'UMLS:may_be_qualified_by'],
         'slot_uri': 'biolink:has_attribute'} })
    deprecated: Optional[bool] = Field(None, description="""A boolean flag indicating that an entity is no longer considered current or valid.""", json_schema_extra = { "linkml_meta": {'alias': 'deprecated',
         'definition_uri': 'https://w3id.org/biolink/vocab/deprecated',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['oboInOwl:ObsoleteClass'],
         'slot_uri': 'biolink:deprecated'} })
    provided_by: Optional[List[str]] = Field(None, description="""The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.""", json_schema_extra = { "linkml_meta": {'alias': 'provided_by',
         'definition_uri': 'https://w3id.org/biolink/vocab/provided_by',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:provided_by'} })
    xref: Optional[List[str]] = Field(default_factory=list, description="""A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.""", json_schema_extra = { "linkml_meta": {'alias': 'xref',
         'aliases': ['dbxref', 'Dbxref', 'DbXref', 'record_url', 'source_record_urls'],
         'definition_uri': 'https://w3id.org/biolink/vocab/xref',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'gene',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'narrow_mappings': ['gff3:Dbxref', 'gpi:DB_Xrefs'],
         'slot_uri': 'biolink:xref'} })
    full_name: Optional[str] = Field(None, description="""a long-form human readable name for a thing""", json_schema_extra = { "linkml_meta": {'alias': 'full_name',
         'definition_uri': 'https://w3id.org/biolink/vocab/full_name',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:full_name'} })
    synonym: Optional[List[str]] = Field(default_factory=list, description="""Alternate human-readable names for a thing""", json_schema_extra = { "linkml_meta": {'alias': 'synonym',
         'aliases': ['alias'],
         'definition_uri': 'https://w3id.org/biolink/vocab/synonym',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'is_a': 'node property',
         'narrow_mappings': ['skos:altLabel',
                             'gff3:Alias',
                             'AGRKB:synonyms',
                             'gpi:DB_Object_Synonyms',
                             'HANCESTRO:0330',
                             'IAO:0000136',
                             'RXNORM:has_tradename'],
         'slot_uri': 'biolink:synonym'} })
    in_taxon: Optional[List[str]] = Field(None, description="""connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'""", json_schema_extra = { "linkml_meta": {'alias': 'in_taxon',
         'aliases': ['instance of',
                     'is organism source of gene product',
                     'organism has gene',
                     'gene found in organism',
                     'gene product has organism source'],
         'definition_uri': 'https://w3id.org/biolink/vocab/in_taxon',
         'domain': 'thing with taxon',
         'domain_of': ['thing with taxon', 'biological entity', 'gene', 'genome'],
         'exact_mappings': ['RO:0002162', 'WIKIDATA_PROPERTY:P703'],
         'in_subset': ['translator_minimal'],
         'inherited': True,
         'is_a': 'related to at instance level',
         'narrow_mappings': ['RO:0002160'],
         'slot_uri': 'biolink:in_taxon'} })
    in_taxon_label: Optional[str] = Field(None, description="""The human readable scientific name for the taxon of the entity.""", json_schema_extra = { "linkml_meta": {'alias': 'in_taxon_label',
         'definition_uri': 'https://w3id.org/biolink/vocab/in_taxon_label',
         'domain': 'thing with taxon',
         'domain_of': ['thing with taxon', 'biological entity', 'gene', 'genome'],
         'exact_mappings': ['WIKIDATA_PROPERTY:P225'],
         'in_subset': ['translator_minimal'],
         'is_a': 'node property',
         'slot_uri': 'biolink:in_taxon_label'} })

    @field_validator('category')
    def pattern_category(cls, v):
        pattern=re.compile(r"^bican:[A-Z][A-Za-z]+$")
        if isinstance(v,list):
            for element in v:
                if not pattern.match(element):
                    raise ValueError(f"Invalid category format: {element}")
        elif isinstance(v,str):
            if not pattern.match(v):
                raise ValueError(f"Invalid category format: {v}")
        return v


class GenomicEntity(ConfiguredBaseModel):
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'class_uri': 'biolink:GenomicEntity',
         'definition_uri': 'https://w3id.org/biolink/vocab/GenomicEntity',
         'from_schema': 'https://w3id.org/biolink/bican-biolink-schema',
         'in_subset': ['translator_minimal'],
         'mixin': True,
         'narrow_mappings': ['STY:T028', 'GENO:0000897']})

    has_biological_sequence: Optional[str] = Field(None, description="""connects a genomic feature to its sequence""", json_schema_extra = { "linkml_meta": {'alias': 'has_biological_sequence',
         'definition_uri': 'https://w3id.org/biolink/vocab/has_biological_sequence',
         'domain': 'named thing',
         'domain_of': ['genomic entity', 'gene', 'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:has_biological_sequence'} })


class ChemicalEntityOrGeneOrGeneProduct(ConfiguredBaseModel):
    """
    A union of chemical entities and children, and gene or gene product. This mixin is helpful to use when searching across chemical entities that must include genes and their children as chemical entities.
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'class_uri': 'biolink:ChemicalEntityOrGeneOrGeneProduct',
         'definition_uri': 'https://w3id.org/biolink/vocab/ChemicalEntityOrGeneOrGeneProduct',
         'from_schema': 'https://w3id.org/biolink/bican-biolink-schema',
         'mixin': True})

    pass


class MacromolecularMachineMixin(ConfiguredBaseModel):
    """
    A union of gene locus, gene product, and macromolecular complex. These are the basic units of function in a cell. They either carry out individual biological activities, or they encode molecules which do this.
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'class_uri': 'biolink:MacromolecularMachineMixin',
         'definition_uri': 'https://w3id.org/biolink/vocab/MacromolecularMachineMixin',
         'from_schema': 'https://w3id.org/biolink/bican-biolink-schema',
         'mixin': True})

    name: Optional[str] = Field(None, description="""A human-readable name for an attribute or entity.""", json_schema_extra = { "linkml_meta": {'alias': 'name',
         'aliases': ['label', 'display name', 'title'],
         'definition_uri': 'https://w3id.org/biolink/vocab/name',
         'domain': 'entity',
         'domain_of': ['attribute',
                       'entity',
                       'macromolecular machine mixin',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene or gene product',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:Name', 'gpi:DB_Object_Name'],
         'in_subset': ['translator_minimal', 'samples'],
         'mappings': ['rdfs:label'],
         'narrow_mappings': ['dct:title', 'WIKIDATA_PROPERTY:P1476'],
         'slot_uri': 'rdfs:label'} })


class GeneOrGeneProduct(MacromolecularMachineMixin):
    """
    A union of gene loci or gene products. Frequently an identifier for one will be used as proxy for another
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'class_uri': 'biolink:GeneOrGeneProduct',
         'definition_uri': 'https://w3id.org/biolink/vocab/GeneOrGeneProduct',
         'from_schema': 'https://w3id.org/biolink/bican-biolink-schema',
         'id_prefixes': ['CHEMBL.TARGET', 'IUPHAR.FAMILY'],
         'mixin': True})

    name: Optional[str] = Field(None, description="""A human-readable name for an attribute or entity.""", json_schema_extra = { "linkml_meta": {'alias': 'name',
         'aliases': ['label', 'display name', 'title'],
         'definition_uri': 'https://w3id.org/biolink/vocab/name',
         'domain': 'entity',
         'domain_of': ['attribute',
                       'entity',
                       'macromolecular machine mixin',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene or gene product',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:Name', 'gpi:DB_Object_Name'],
         'in_subset': ['translator_minimal', 'samples'],
         'mappings': ['rdfs:label'],
         'narrow_mappings': ['dct:title', 'WIKIDATA_PROPERTY:P1476'],
         'slot_uri': 'rdfs:label'} })


class Gene(GeneOrGeneProduct, ChemicalEntityOrGeneOrGeneProduct, GenomicEntity, BiologicalEntity, PhysicalEssence, OntologyClass):
    """
    A region (or regions) that includes all of the sequence elements necessary to encode a functional transcript. A gene locus may include regulatory regions, transcribed regions and/or other functional sequence regions.
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'broad_mappings': ['NCIT:C45822'],
         'class_uri': 'biolink:Gene',
         'definition_uri': 'https://w3id.org/biolink/vocab/Gene',
         'exact_mappings': ['SO:0000704', 'SIO:010035', 'WIKIDATA:Q7187', 'dcid:Gene'],
         'from_schema': 'https://w3id.org/biolink/bican-biolink-schema',
         'id_prefixes': ['NCBIGene',
                         'ENSEMBL',
                         'HGNC',
                         'MGI',
                         'ZFIN',
                         'dictyBase',
                         'WB',
                         'WormBase',
                         'FB',
                         'RGD',
                         'SGD',
                         'PomBase',
                         'OMIM',
                         'KEGG.GENES',
                         'UMLS',
                         'Xenbase',
                         'AspGD',
                         'PHARMGKB.GENE'],
         'in_subset': ['translator_minimal', 'model_organism_database'],
         'mixins': ['GeneOrGeneProduct',
                    'GenomicEntity',
                    'ChemicalEntityOrGeneOrGeneProduct',
                    'PhysicalEssence',
                    'OntologyClass'],
         'narrow_mappings': ['bioschemas:gene']})

    id: str = Field(..., description="""A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI""", json_schema_extra = { "linkml_meta": {'alias': 'id',
         'definition_uri': 'https://w3id.org/biolink/vocab/id',
         'domain': 'entity',
         'domain_of': ['ontology class',
                       'entity',
                       'attribute',
                       'named thing',
                       'taxonomic rank',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['AGRKB:primaryId', 'gff3:ID', 'gpi:DB_Object_ID'],
         'in_subset': ['translator_minimal'],
         'slot_uri': 'biolink:id'} })
    iri: Optional[str] = Field(None, description="""An IRI for an entity. This is determined by the id using expansion rules.""", json_schema_extra = { "linkml_meta": {'alias': 'iri',
         'definition_uri': 'https://w3id.org/biolink/vocab/iri',
         'domain_of': ['attribute',
                       'entity',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['WIKIDATA_PROPERTY:P854'],
         'in_subset': ['translator_minimal', 'samples'],
         'slot_uri': 'biolink:iri'} })
    category: List[Literal["https://w3id.org/biolink/vocab/Gene","biolink:Gene"]] = Field(["biolink:Gene"], description="""Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}. NOTE: The category slot was modified to have a curie range and a pattern for bican categories.""", json_schema_extra = { "linkml_meta": {'alias': 'category',
         'definition_uri': 'https://w3id.org/biolink/vocab/category',
         'designates_type': True,
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'is_a': 'type',
         'is_class_field': True,
         'slot_uri': 'biolink:category'} })
    type: Optional[List[str]] = Field(default_factory=list, json_schema_extra = { "linkml_meta": {'alias': 'type',
         'definition_uri': 'https://w3id.org/biolink/vocab/type',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:type', 'gpi:DB_Object_Type'],
         'mappings': ['rdf:type'],
         'slot_uri': 'rdf:type'} })
    name: Optional[str] = Field(None, description="""A human-readable name for an attribute or entity.""", json_schema_extra = { "linkml_meta": {'alias': 'name',
         'aliases': ['label', 'display name', 'title'],
         'definition_uri': 'https://w3id.org/biolink/vocab/name',
         'domain': 'entity',
         'domain_of': ['attribute',
                       'entity',
                       'macromolecular machine mixin',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene or gene product',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:Name', 'gpi:DB_Object_Name'],
         'in_subset': ['translator_minimal', 'samples'],
         'mappings': ['rdfs:label'],
         'narrow_mappings': ['dct:title', 'WIKIDATA_PROPERTY:P1476'],
         'slot_uri': 'rdfs:label'} })
    description: Optional[str] = Field(None, description="""a human-readable description of an entity""", json_schema_extra = { "linkml_meta": {'alias': 'description',
         'aliases': ['definition'],
         'definition_uri': 'https://w3id.org/biolink/vocab/description',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['IAO:0000115', 'skos:definitions'],
         'in_subset': ['translator_minimal'],
         'mappings': ['dct:description'],
         'narrow_mappings': ['gff3:Description'],
         'slot_uri': 'dct:description'} })
    has_attribute: Optional[List[str]] = Field(None, description="""connects any entity to an attribute""", json_schema_extra = { "linkml_meta": {'alias': 'has_attribute',
         'close_mappings': ['OBI:0001927'],
         'definition_uri': 'https://w3id.org/biolink/vocab/has_attribute',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['SIO:000008'],
         'in_subset': ['samples'],
         'narrow_mappings': ['OBAN:association_has_subject_property',
                             'OBAN:association_has_object_property',
                             'CPT:has_possibly_included_panel_element',
                             'DRUGBANK:category',
                             'EFO:is_executed_in',
                             'HANCESTRO:0301',
                             'LOINC:has_action_guidance',
                             'LOINC:has_adjustment',
                             'LOINC:has_aggregation_view',
                             'LOINC:has_approach_guidance',
                             'LOINC:has_divisor',
                             'LOINC:has_exam',
                             'LOINC:has_method',
                             'LOINC:has_modality_subtype',
                             'LOINC:has_object_guidance',
                             'LOINC:has_scale',
                             'LOINC:has_suffix',
                             'LOINC:has_time_aspect',
                             'LOINC:has_time_modifier',
                             'LOINC:has_timing_of',
                             'NCIT:R88',
                             'NCIT:eo_disease_has_property_or_attribute',
                             'NCIT:has_data_element',
                             'NCIT:has_pharmaceutical_administration_method',
                             'NCIT:has_pharmaceutical_basic_dose_form',
                             'NCIT:has_pharmaceutical_intended_site',
                             'NCIT:has_pharmaceutical_release_characteristics',
                             'NCIT:has_pharmaceutical_state_of_matter',
                             'NCIT:has_pharmaceutical_transformation',
                             'NCIT:is_qualified_by',
                             'NCIT:qualifier_applies_to',
                             'NCIT:role_has_domain',
                             'NCIT:role_has_range',
                             'INO:0000154',
                             'HANCESTRO:0308',
                             'OMIM:has_inheritance_type',
                             'orphanet:C016',
                             'orphanet:C017',
                             'RO:0000053',
                             'RO:0000086',
                             'RO:0000087',
                             'SNOMED:has_access',
                             'SNOMED:has_clinical_course',
                             'SNOMED:has_count_of_base_of_active_ingredient',
                             'SNOMED:has_dose_form_administration_method',
                             'SNOMED:has_dose_form_release_characteristic',
                             'SNOMED:has_dose_form_transformation',
                             'SNOMED:has_finding_context',
                             'SNOMED:has_finding_informer',
                             'SNOMED:has_inherent_attribute',
                             'SNOMED:has_intent',
                             'SNOMED:has_interpretation',
                             'SNOMED:has_laterality',
                             'SNOMED:has_measurement_method',
                             'SNOMED:has_method',
                             'SNOMED:has_priority',
                             'SNOMED:has_procedure_context',
                             'SNOMED:has_process_duration',
                             'SNOMED:has_property',
                             'SNOMED:has_revision_status',
                             'SNOMED:has_scale_type',
                             'SNOMED:has_severity',
                             'SNOMED:has_specimen',
                             'SNOMED:has_state_of_matter',
                             'SNOMED:has_subject_relationship_context',
                             'SNOMED:has_surgical_approach',
                             'SNOMED:has_technique',
                             'SNOMED:has_temporal_context',
                             'SNOMED:has_time_aspect',
                             'SNOMED:has_units',
                             'UMLS:has_structural_class',
                             'UMLS:has_supported_concept_property',
                             'UMLS:has_supported_concept_relationship',
                             'UMLS:may_be_qualified_by'],
         'slot_uri': 'biolink:has_attribute'} })
    deprecated: Optional[bool] = Field(None, description="""A boolean flag indicating that an entity is no longer considered current or valid.""", json_schema_extra = { "linkml_meta": {'alias': 'deprecated',
         'definition_uri': 'https://w3id.org/biolink/vocab/deprecated',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['oboInOwl:ObsoleteClass'],
         'slot_uri': 'biolink:deprecated'} })
    provided_by: Optional[List[str]] = Field(None, description="""The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.""", json_schema_extra = { "linkml_meta": {'alias': 'provided_by',
         'definition_uri': 'https://w3id.org/biolink/vocab/provided_by',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:provided_by'} })
    full_name: Optional[str] = Field(None, description="""a long-form human readable name for a thing""", json_schema_extra = { "linkml_meta": {'alias': 'full_name',
         'definition_uri': 'https://w3id.org/biolink/vocab/full_name',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:full_name'} })
    synonym: Optional[List[str]] = Field(default_factory=list, description="""Alternate human-readable names for a thing""", json_schema_extra = { "linkml_meta": {'alias': 'synonym',
         'aliases': ['alias'],
         'definition_uri': 'https://w3id.org/biolink/vocab/synonym',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'is_a': 'node property',
         'narrow_mappings': ['skos:altLabel',
                             'gff3:Alias',
                             'AGRKB:synonyms',
                             'gpi:DB_Object_Synonyms',
                             'HANCESTRO:0330',
                             'IAO:0000136',
                             'RXNORM:has_tradename'],
         'slot_uri': 'biolink:synonym'} })
    in_taxon: Optional[List[str]] = Field(None, description="""connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'""", json_schema_extra = { "linkml_meta": {'alias': 'in_taxon',
         'aliases': ['instance of',
                     'is organism source of gene product',
                     'organism has gene',
                     'gene found in organism',
                     'gene product has organism source'],
         'definition_uri': 'https://w3id.org/biolink/vocab/in_taxon',
         'domain': 'thing with taxon',
         'domain_of': ['thing with taxon', 'biological entity', 'gene', 'genome'],
         'exact_mappings': ['RO:0002162', 'WIKIDATA_PROPERTY:P703'],
         'in_subset': ['translator_minimal'],
         'inherited': True,
         'is_a': 'related to at instance level',
         'narrow_mappings': ['RO:0002160'],
         'slot_uri': 'biolink:in_taxon'} })
    in_taxon_label: Optional[str] = Field(None, description="""The human readable scientific name for the taxon of the entity.""", json_schema_extra = { "linkml_meta": {'alias': 'in_taxon_label',
         'definition_uri': 'https://w3id.org/biolink/vocab/in_taxon_label',
         'domain': 'thing with taxon',
         'domain_of': ['thing with taxon', 'biological entity', 'gene', 'genome'],
         'exact_mappings': ['WIKIDATA_PROPERTY:P225'],
         'in_subset': ['translator_minimal'],
         'is_a': 'node property',
         'slot_uri': 'biolink:in_taxon_label'} })
    symbol: Optional[str] = Field(None, description="""Symbol for a particular thing""", json_schema_extra = { "linkml_meta": {'alias': 'symbol',
         'definition_uri': 'https://w3id.org/biolink/vocab/symbol',
         'domain': 'named thing',
         'domain_of': ['gene'],
         'exact_mappings': ['AGRKB:symbol', 'gpi:DB_Object_Symbol'],
         'is_a': 'node property',
         'slot_uri': 'biolink:symbol'} })
    xref: Optional[List[str]] = Field(default_factory=list, description="""A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.""", json_schema_extra = { "linkml_meta": {'alias': 'xref',
         'aliases': ['dbxref', 'Dbxref', 'DbXref', 'record_url', 'source_record_urls'],
         'definition_uri': 'https://w3id.org/biolink/vocab/xref',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'gene',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'narrow_mappings': ['gff3:Dbxref', 'gpi:DB_Xrefs'],
         'slot_uri': 'biolink:xref'} })
    has_biological_sequence: Optional[str] = Field(None, description="""connects a genomic feature to its sequence""", json_schema_extra = { "linkml_meta": {'alias': 'has_biological_sequence',
         'definition_uri': 'https://w3id.org/biolink/vocab/has_biological_sequence',
         'domain': 'named thing',
         'domain_of': ['genomic entity', 'gene', 'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:has_biological_sequence'} })

    @field_validator('category')
    def pattern_category(cls, v):
        pattern=re.compile(r"^bican:[A-Z][A-Za-z]+$")
        if isinstance(v,list):
            for element in v:
                if not pattern.match(element):
                    raise ValueError(f"Invalid category format: {element}")
        elif isinstance(v,str):
            if not pattern.match(v):
                raise ValueError(f"Invalid category format: {v}")
        return v


class Genome(GenomicEntity, BiologicalEntity, PhysicalEssence, OntologyClass):
    """
    A genome is the sum of genetic material within a cell or virion.
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'class_uri': 'biolink:Genome',
         'close_mappings': ['dcid:GenomeAssemblyUnit'],
         'definition_uri': 'https://w3id.org/biolink/vocab/Genome',
         'exact_mappings': ['SO:0001026', 'SIO:000984', 'WIKIDATA:Q7020'],
         'from_schema': 'https://w3id.org/biolink/bican-biolink-schema',
         'in_subset': ['model_organism_database'],
         'mixins': ['GenomicEntity', 'PhysicalEssence', 'OntologyClass']})

    id: str = Field(..., description="""A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI""", json_schema_extra = { "linkml_meta": {'alias': 'id',
         'definition_uri': 'https://w3id.org/biolink/vocab/id',
         'domain': 'entity',
         'domain_of': ['ontology class',
                       'entity',
                       'attribute',
                       'named thing',
                       'taxonomic rank',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['AGRKB:primaryId', 'gff3:ID', 'gpi:DB_Object_ID'],
         'in_subset': ['translator_minimal'],
         'slot_uri': 'biolink:id'} })
    iri: Optional[str] = Field(None, description="""An IRI for an entity. This is determined by the id using expansion rules.""", json_schema_extra = { "linkml_meta": {'alias': 'iri',
         'definition_uri': 'https://w3id.org/biolink/vocab/iri',
         'domain_of': ['attribute',
                       'entity',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['WIKIDATA_PROPERTY:P854'],
         'in_subset': ['translator_minimal', 'samples'],
         'slot_uri': 'biolink:iri'} })
    category: List[Literal["https://w3id.org/biolink/vocab/Genome","biolink:Genome"]] = Field(["biolink:Genome"], description="""Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}. NOTE: The category slot was modified to have a curie range and a pattern for bican categories.""", json_schema_extra = { "linkml_meta": {'alias': 'category',
         'definition_uri': 'https://w3id.org/biolink/vocab/category',
         'designates_type': True,
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'is_a': 'type',
         'is_class_field': True,
         'slot_uri': 'biolink:category'} })
    type: Optional[List[str]] = Field(default_factory=list, json_schema_extra = { "linkml_meta": {'alias': 'type',
         'definition_uri': 'https://w3id.org/biolink/vocab/type',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:type', 'gpi:DB_Object_Type'],
         'mappings': ['rdf:type'],
         'slot_uri': 'rdf:type'} })
    name: Optional[str] = Field(None, description="""A human-readable name for an attribute or entity.""", json_schema_extra = { "linkml_meta": {'alias': 'name',
         'aliases': ['label', 'display name', 'title'],
         'definition_uri': 'https://w3id.org/biolink/vocab/name',
         'domain': 'entity',
         'domain_of': ['attribute',
                       'entity',
                       'macromolecular machine mixin',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene or gene product',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:Name', 'gpi:DB_Object_Name'],
         'in_subset': ['translator_minimal', 'samples'],
         'mappings': ['rdfs:label'],
         'narrow_mappings': ['dct:title', 'WIKIDATA_PROPERTY:P1476'],
         'slot_uri': 'rdfs:label'} })
    description: Optional[str] = Field(None, description="""a human-readable description of an entity""", json_schema_extra = { "linkml_meta": {'alias': 'description',
         'aliases': ['definition'],
         'definition_uri': 'https://w3id.org/biolink/vocab/description',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['IAO:0000115', 'skos:definitions'],
         'in_subset': ['translator_minimal'],
         'mappings': ['dct:description'],
         'narrow_mappings': ['gff3:Description'],
         'slot_uri': 'dct:description'} })
    has_attribute: Optional[List[str]] = Field(None, description="""connects any entity to an attribute""", json_schema_extra = { "linkml_meta": {'alias': 'has_attribute',
         'close_mappings': ['OBI:0001927'],
         'definition_uri': 'https://w3id.org/biolink/vocab/has_attribute',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['SIO:000008'],
         'in_subset': ['samples'],
         'narrow_mappings': ['OBAN:association_has_subject_property',
                             'OBAN:association_has_object_property',
                             'CPT:has_possibly_included_panel_element',
                             'DRUGBANK:category',
                             'EFO:is_executed_in',
                             'HANCESTRO:0301',
                             'LOINC:has_action_guidance',
                             'LOINC:has_adjustment',
                             'LOINC:has_aggregation_view',
                             'LOINC:has_approach_guidance',
                             'LOINC:has_divisor',
                             'LOINC:has_exam',
                             'LOINC:has_method',
                             'LOINC:has_modality_subtype',
                             'LOINC:has_object_guidance',
                             'LOINC:has_scale',
                             'LOINC:has_suffix',
                             'LOINC:has_time_aspect',
                             'LOINC:has_time_modifier',
                             'LOINC:has_timing_of',
                             'NCIT:R88',
                             'NCIT:eo_disease_has_property_or_attribute',
                             'NCIT:has_data_element',
                             'NCIT:has_pharmaceutical_administration_method',
                             'NCIT:has_pharmaceutical_basic_dose_form',
                             'NCIT:has_pharmaceutical_intended_site',
                             'NCIT:has_pharmaceutical_release_characteristics',
                             'NCIT:has_pharmaceutical_state_of_matter',
                             'NCIT:has_pharmaceutical_transformation',
                             'NCIT:is_qualified_by',
                             'NCIT:qualifier_applies_to',
                             'NCIT:role_has_domain',
                             'NCIT:role_has_range',
                             'INO:0000154',
                             'HANCESTRO:0308',
                             'OMIM:has_inheritance_type',
                             'orphanet:C016',
                             'orphanet:C017',
                             'RO:0000053',
                             'RO:0000086',
                             'RO:0000087',
                             'SNOMED:has_access',
                             'SNOMED:has_clinical_course',
                             'SNOMED:has_count_of_base_of_active_ingredient',
                             'SNOMED:has_dose_form_administration_method',
                             'SNOMED:has_dose_form_release_characteristic',
                             'SNOMED:has_dose_form_transformation',
                             'SNOMED:has_finding_context',
                             'SNOMED:has_finding_informer',
                             'SNOMED:has_inherent_attribute',
                             'SNOMED:has_intent',
                             'SNOMED:has_interpretation',
                             'SNOMED:has_laterality',
                             'SNOMED:has_measurement_method',
                             'SNOMED:has_method',
                             'SNOMED:has_priority',
                             'SNOMED:has_procedure_context',
                             'SNOMED:has_process_duration',
                             'SNOMED:has_property',
                             'SNOMED:has_revision_status',
                             'SNOMED:has_scale_type',
                             'SNOMED:has_severity',
                             'SNOMED:has_specimen',
                             'SNOMED:has_state_of_matter',
                             'SNOMED:has_subject_relationship_context',
                             'SNOMED:has_surgical_approach',
                             'SNOMED:has_technique',
                             'SNOMED:has_temporal_context',
                             'SNOMED:has_time_aspect',
                             'SNOMED:has_units',
                             'UMLS:has_structural_class',
                             'UMLS:has_supported_concept_property',
                             'UMLS:has_supported_concept_relationship',
                             'UMLS:may_be_qualified_by'],
         'slot_uri': 'biolink:has_attribute'} })
    deprecated: Optional[bool] = Field(None, description="""A boolean flag indicating that an entity is no longer considered current or valid.""", json_schema_extra = { "linkml_meta": {'alias': 'deprecated',
         'definition_uri': 'https://w3id.org/biolink/vocab/deprecated',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['oboInOwl:ObsoleteClass'],
         'slot_uri': 'biolink:deprecated'} })
    provided_by: Optional[List[str]] = Field(None, description="""The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.""", json_schema_extra = { "linkml_meta": {'alias': 'provided_by',
         'definition_uri': 'https://w3id.org/biolink/vocab/provided_by',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:provided_by'} })
    xref: Optional[List[str]] = Field(default_factory=list, description="""A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.""", json_schema_extra = { "linkml_meta": {'alias': 'xref',
         'aliases': ['dbxref', 'Dbxref', 'DbXref', 'record_url', 'source_record_urls'],
         'definition_uri': 'https://w3id.org/biolink/vocab/xref',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'gene',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'narrow_mappings': ['gff3:Dbxref', 'gpi:DB_Xrefs'],
         'slot_uri': 'biolink:xref'} })
    full_name: Optional[str] = Field(None, description="""a long-form human readable name for a thing""", json_schema_extra = { "linkml_meta": {'alias': 'full_name',
         'definition_uri': 'https://w3id.org/biolink/vocab/full_name',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:full_name'} })
    synonym: Optional[List[str]] = Field(default_factory=list, description="""Alternate human-readable names for a thing""", json_schema_extra = { "linkml_meta": {'alias': 'synonym',
         'aliases': ['alias'],
         'definition_uri': 'https://w3id.org/biolink/vocab/synonym',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'is_a': 'node property',
         'narrow_mappings': ['skos:altLabel',
                             'gff3:Alias',
                             'AGRKB:synonyms',
                             'gpi:DB_Object_Synonyms',
                             'HANCESTRO:0330',
                             'IAO:0000136',
                             'RXNORM:has_tradename'],
         'slot_uri': 'biolink:synonym'} })
    in_taxon: Optional[List[str]] = Field(None, description="""connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'""", json_schema_extra = { "linkml_meta": {'alias': 'in_taxon',
         'aliases': ['instance of',
                     'is organism source of gene product',
                     'organism has gene',
                     'gene found in organism',
                     'gene product has organism source'],
         'definition_uri': 'https://w3id.org/biolink/vocab/in_taxon',
         'domain': 'thing with taxon',
         'domain_of': ['thing with taxon', 'biological entity', 'gene', 'genome'],
         'exact_mappings': ['RO:0002162', 'WIKIDATA_PROPERTY:P703'],
         'in_subset': ['translator_minimal'],
         'inherited': True,
         'is_a': 'related to at instance level',
         'narrow_mappings': ['RO:0002160'],
         'slot_uri': 'biolink:in_taxon'} })
    in_taxon_label: Optional[str] = Field(None, description="""The human readable scientific name for the taxon of the entity.""", json_schema_extra = { "linkml_meta": {'alias': 'in_taxon_label',
         'definition_uri': 'https://w3id.org/biolink/vocab/in_taxon_label',
         'domain': 'thing with taxon',
         'domain_of': ['thing with taxon', 'biological entity', 'gene', 'genome'],
         'exact_mappings': ['WIKIDATA_PROPERTY:P225'],
         'in_subset': ['translator_minimal'],
         'is_a': 'node property',
         'slot_uri': 'biolink:in_taxon_label'} })
    has_biological_sequence: Optional[str] = Field(None, description="""connects a genomic feature to its sequence""", json_schema_extra = { "linkml_meta": {'alias': 'has_biological_sequence',
         'definition_uri': 'https://w3id.org/biolink/vocab/has_biological_sequence',
         'domain': 'named thing',
         'domain_of': ['genomic entity', 'gene', 'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:has_biological_sequence'} })

    @field_validator('category')
    def pattern_category(cls, v):
        pattern=re.compile(r"^bican:[A-Z][A-Za-z]+$")
        if isinstance(v,list):
            for element in v:
                if not pattern.match(element):
                    raise ValueError(f"Invalid category format: {element}")
        elif isinstance(v,str):
            if not pattern.match(v):
                raise ValueError(f"Invalid category format: {v}")
        return v


class Checksum(Entity):
    """
    Checksum values associated with digital entities.
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'from_schema': 'https://identifiers.org/brain-bican/bican-core-schema'})

    checksum_algorithm: Optional[DigestType] = Field(None, description="""The type of cryptographic hash function used to calculate the checksum value.""", json_schema_extra = { "linkml_meta": {'alias': 'checksum_algorithm', 'domain_of': ['checksum']} })
    value: Optional[str] = Field(None, description="""The checksum value obtained from a specific cryotographic hash function.""", json_schema_extra = { "linkml_meta": {'alias': 'value', 'domain_of': ['checksum']} })
    id: str = Field(..., description="""A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI""", json_schema_extra = { "linkml_meta": {'alias': 'id',
         'definition_uri': 'https://w3id.org/biolink/vocab/id',
         'domain': 'entity',
         'domain_of': ['ontology class',
                       'entity',
                       'attribute',
                       'named thing',
                       'taxonomic rank',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['AGRKB:primaryId', 'gff3:ID', 'gpi:DB_Object_ID'],
         'in_subset': ['translator_minimal'],
         'slot_uri': 'biolink:id'} })
    iri: Optional[str] = Field(None, description="""An IRI for an entity. This is determined by the id using expansion rules.""", json_schema_extra = { "linkml_meta": {'alias': 'iri',
         'definition_uri': 'https://w3id.org/biolink/vocab/iri',
         'domain_of': ['attribute',
                       'entity',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['WIKIDATA_PROPERTY:P854'],
         'in_subset': ['translator_minimal', 'samples'],
         'slot_uri': 'biolink:iri'} })
    category: List[Literal["https://identifiers.org/brain-bican/vocab/Checksum","bican:Checksum"]] = Field(["bican:Checksum"], description="""Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}. NOTE: The category slot was modified to have a curie range and a pattern for bican categories.""", json_schema_extra = { "linkml_meta": {'alias': 'category',
         'definition_uri': 'https://w3id.org/biolink/vocab/category',
         'designates_type': True,
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'is_a': 'type',
         'is_class_field': True,
         'slot_uri': 'biolink:category'} })
    type: Optional[List[str]] = Field(default_factory=list, json_schema_extra = { "linkml_meta": {'alias': 'type',
         'definition_uri': 'https://w3id.org/biolink/vocab/type',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:type', 'gpi:DB_Object_Type'],
         'mappings': ['rdf:type'],
         'slot_uri': 'rdf:type'} })
    name: Optional[str] = Field(None, description="""A human-readable name for an attribute or entity.""", json_schema_extra = { "linkml_meta": {'alias': 'name',
         'aliases': ['label', 'display name', 'title'],
         'definition_uri': 'https://w3id.org/biolink/vocab/name',
         'domain': 'entity',
         'domain_of': ['attribute',
                       'entity',
                       'macromolecular machine mixin',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene or gene product',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:Name', 'gpi:DB_Object_Name'],
         'in_subset': ['translator_minimal', 'samples'],
         'mappings': ['rdfs:label'],
         'narrow_mappings': ['dct:title', 'WIKIDATA_PROPERTY:P1476'],
         'slot_uri': 'rdfs:label'} })
    description: Optional[str] = Field(None, description="""a human-readable description of an entity""", json_schema_extra = { "linkml_meta": {'alias': 'description',
         'aliases': ['definition'],
         'definition_uri': 'https://w3id.org/biolink/vocab/description',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['IAO:0000115', 'skos:definitions'],
         'in_subset': ['translator_minimal'],
         'mappings': ['dct:description'],
         'narrow_mappings': ['gff3:Description'],
         'slot_uri': 'dct:description'} })
    has_attribute: Optional[List[str]] = Field(None, description="""connects any entity to an attribute""", json_schema_extra = { "linkml_meta": {'alias': 'has_attribute',
         'close_mappings': ['OBI:0001927'],
         'definition_uri': 'https://w3id.org/biolink/vocab/has_attribute',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['SIO:000008'],
         'in_subset': ['samples'],
         'narrow_mappings': ['OBAN:association_has_subject_property',
                             'OBAN:association_has_object_property',
                             'CPT:has_possibly_included_panel_element',
                             'DRUGBANK:category',
                             'EFO:is_executed_in',
                             'HANCESTRO:0301',
                             'LOINC:has_action_guidance',
                             'LOINC:has_adjustment',
                             'LOINC:has_aggregation_view',
                             'LOINC:has_approach_guidance',
                             'LOINC:has_divisor',
                             'LOINC:has_exam',
                             'LOINC:has_method',
                             'LOINC:has_modality_subtype',
                             'LOINC:has_object_guidance',
                             'LOINC:has_scale',
                             'LOINC:has_suffix',
                             'LOINC:has_time_aspect',
                             'LOINC:has_time_modifier',
                             'LOINC:has_timing_of',
                             'NCIT:R88',
                             'NCIT:eo_disease_has_property_or_attribute',
                             'NCIT:has_data_element',
                             'NCIT:has_pharmaceutical_administration_method',
                             'NCIT:has_pharmaceutical_basic_dose_form',
                             'NCIT:has_pharmaceutical_intended_site',
                             'NCIT:has_pharmaceutical_release_characteristics',
                             'NCIT:has_pharmaceutical_state_of_matter',
                             'NCIT:has_pharmaceutical_transformation',
                             'NCIT:is_qualified_by',
                             'NCIT:qualifier_applies_to',
                             'NCIT:role_has_domain',
                             'NCIT:role_has_range',
                             'INO:0000154',
                             'HANCESTRO:0308',
                             'OMIM:has_inheritance_type',
                             'orphanet:C016',
                             'orphanet:C017',
                             'RO:0000053',
                             'RO:0000086',
                             'RO:0000087',
                             'SNOMED:has_access',
                             'SNOMED:has_clinical_course',
                             'SNOMED:has_count_of_base_of_active_ingredient',
                             'SNOMED:has_dose_form_administration_method',
                             'SNOMED:has_dose_form_release_characteristic',
                             'SNOMED:has_dose_form_transformation',
                             'SNOMED:has_finding_context',
                             'SNOMED:has_finding_informer',
                             'SNOMED:has_inherent_attribute',
                             'SNOMED:has_intent',
                             'SNOMED:has_interpretation',
                             'SNOMED:has_laterality',
                             'SNOMED:has_measurement_method',
                             'SNOMED:has_method',
                             'SNOMED:has_priority',
                             'SNOMED:has_procedure_context',
                             'SNOMED:has_process_duration',
                             'SNOMED:has_property',
                             'SNOMED:has_revision_status',
                             'SNOMED:has_scale_type',
                             'SNOMED:has_severity',
                             'SNOMED:has_specimen',
                             'SNOMED:has_state_of_matter',
                             'SNOMED:has_subject_relationship_context',
                             'SNOMED:has_surgical_approach',
                             'SNOMED:has_technique',
                             'SNOMED:has_temporal_context',
                             'SNOMED:has_time_aspect',
                             'SNOMED:has_units',
                             'UMLS:has_structural_class',
                             'UMLS:has_supported_concept_property',
                             'UMLS:has_supported_concept_relationship',
                             'UMLS:may_be_qualified_by'],
         'slot_uri': 'biolink:has_attribute'} })
    deprecated: Optional[bool] = Field(None, description="""A boolean flag indicating that an entity is no longer considered current or valid.""", json_schema_extra = { "linkml_meta": {'alias': 'deprecated',
         'definition_uri': 'https://w3id.org/biolink/vocab/deprecated',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['oboInOwl:ObsoleteClass'],
         'slot_uri': 'biolink:deprecated'} })

    @field_validator('category')
    def pattern_category(cls, v):
        pattern=re.compile(r"^bican:[A-Z][A-Za-z]+$")
        if isinstance(v,list):
            for element in v:
                if not pattern.match(element):
                    raise ValueError(f"Invalid category format: {element}")
        elif isinstance(v,str):
            if not pattern.match(v):
                raise ValueError(f"Invalid category format: {v}")
        return v


class GeneAnnotation(Gene):
    """
    An annotation describing the location, boundaries, and functions of  individual genes within a genome annotation.
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'from_schema': 'https://identifiers.org/brain-bican/genome-annotation-schema',
         'id_prefixes': ['ENSEMBL', 'MGI', 'NCBIGene']})

    molecular_type: Optional[Union[BioType, str]] = Field(None, json_schema_extra = { "linkml_meta": {'alias': 'molecular_type',
         'any_of': [{'range': 'BioType'}, {'range': 'string'}],
         'domain_of': ['gene annotation']} })
    source_id: Optional[str] = Field(None, description="""The authority specific identifier.""", json_schema_extra = { "linkml_meta": {'alias': 'source_id',
         'domain_of': ['gene annotation'],
         'slot_uri': 'schema:identifier'} })
    referenced_in: Union[GenomeAnnotation, str] = Field(..., description="""The genome annotation that this gene annotation was referenced from.""", json_schema_extra = { "linkml_meta": {'alias': 'referenced_in',
         'any_of': [{'range': 'genome annotation'}, {'range': 'string'}],
         'domain_of': ['gene annotation']} })
    id: str = Field(..., description="""A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI""", json_schema_extra = { "linkml_meta": {'alias': 'id',
         'definition_uri': 'https://w3id.org/biolink/vocab/id',
         'domain': 'entity',
         'domain_of': ['ontology class',
                       'entity',
                       'attribute',
                       'named thing',
                       'taxonomic rank',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['AGRKB:primaryId', 'gff3:ID', 'gpi:DB_Object_ID'],
         'in_subset': ['translator_minimal'],
         'slot_uri': 'biolink:id'} })
    iri: Optional[str] = Field(None, description="""An IRI for an entity. This is determined by the id using expansion rules.""", json_schema_extra = { "linkml_meta": {'alias': 'iri',
         'definition_uri': 'https://w3id.org/biolink/vocab/iri',
         'domain_of': ['attribute',
                       'entity',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['WIKIDATA_PROPERTY:P854'],
         'in_subset': ['translator_minimal', 'samples'],
         'slot_uri': 'biolink:iri'} })
    category: List[Literal["https://identifiers.org/brain-bican/vocab/GeneAnnotation","bican:GeneAnnotation"]] = Field(["bican:GeneAnnotation"], description="""Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}. NOTE: The category slot was modified to have a curie range and a pattern for bican categories.""", json_schema_extra = { "linkml_meta": {'alias': 'category',
         'definition_uri': 'https://w3id.org/biolink/vocab/category',
         'designates_type': True,
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'is_a': 'type',
         'is_class_field': True,
         'slot_uri': 'biolink:category'} })
    type: Optional[List[str]] = Field(default_factory=list, json_schema_extra = { "linkml_meta": {'alias': 'type',
         'definition_uri': 'https://w3id.org/biolink/vocab/type',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:type', 'gpi:DB_Object_Type'],
         'mappings': ['rdf:type'],
         'slot_uri': 'rdf:type'} })
    name: Optional[str] = Field(None, description="""A human-readable name for an attribute or entity.""", json_schema_extra = { "linkml_meta": {'alias': 'name',
         'aliases': ['label', 'display name', 'title'],
         'definition_uri': 'https://w3id.org/biolink/vocab/name',
         'domain': 'entity',
         'domain_of': ['attribute',
                       'entity',
                       'macromolecular machine mixin',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene or gene product',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:Name', 'gpi:DB_Object_Name'],
         'in_subset': ['translator_minimal', 'samples'],
         'mappings': ['rdfs:label'],
         'narrow_mappings': ['dct:title', 'WIKIDATA_PROPERTY:P1476'],
         'slot_uri': 'rdfs:label'} })
    description: Optional[str] = Field(None, description="""a human-readable description of an entity""", json_schema_extra = { "linkml_meta": {'alias': 'description',
         'aliases': ['definition'],
         'definition_uri': 'https://w3id.org/biolink/vocab/description',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['IAO:0000115', 'skos:definitions'],
         'in_subset': ['translator_minimal'],
         'mappings': ['dct:description'],
         'narrow_mappings': ['gff3:Description'],
         'slot_uri': 'dct:description'} })
    has_attribute: Optional[List[str]] = Field(None, description="""connects any entity to an attribute""", json_schema_extra = { "linkml_meta": {'alias': 'has_attribute',
         'close_mappings': ['OBI:0001927'],
         'definition_uri': 'https://w3id.org/biolink/vocab/has_attribute',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['SIO:000008'],
         'in_subset': ['samples'],
         'narrow_mappings': ['OBAN:association_has_subject_property',
                             'OBAN:association_has_object_property',
                             'CPT:has_possibly_included_panel_element',
                             'DRUGBANK:category',
                             'EFO:is_executed_in',
                             'HANCESTRO:0301',
                             'LOINC:has_action_guidance',
                             'LOINC:has_adjustment',
                             'LOINC:has_aggregation_view',
                             'LOINC:has_approach_guidance',
                             'LOINC:has_divisor',
                             'LOINC:has_exam',
                             'LOINC:has_method',
                             'LOINC:has_modality_subtype',
                             'LOINC:has_object_guidance',
                             'LOINC:has_scale',
                             'LOINC:has_suffix',
                             'LOINC:has_time_aspect',
                             'LOINC:has_time_modifier',
                             'LOINC:has_timing_of',
                             'NCIT:R88',
                             'NCIT:eo_disease_has_property_or_attribute',
                             'NCIT:has_data_element',
                             'NCIT:has_pharmaceutical_administration_method',
                             'NCIT:has_pharmaceutical_basic_dose_form',
                             'NCIT:has_pharmaceutical_intended_site',
                             'NCIT:has_pharmaceutical_release_characteristics',
                             'NCIT:has_pharmaceutical_state_of_matter',
                             'NCIT:has_pharmaceutical_transformation',
                             'NCIT:is_qualified_by',
                             'NCIT:qualifier_applies_to',
                             'NCIT:role_has_domain',
                             'NCIT:role_has_range',
                             'INO:0000154',
                             'HANCESTRO:0308',
                             'OMIM:has_inheritance_type',
                             'orphanet:C016',
                             'orphanet:C017',
                             'RO:0000053',
                             'RO:0000086',
                             'RO:0000087',
                             'SNOMED:has_access',
                             'SNOMED:has_clinical_course',
                             'SNOMED:has_count_of_base_of_active_ingredient',
                             'SNOMED:has_dose_form_administration_method',
                             'SNOMED:has_dose_form_release_characteristic',
                             'SNOMED:has_dose_form_transformation',
                             'SNOMED:has_finding_context',
                             'SNOMED:has_finding_informer',
                             'SNOMED:has_inherent_attribute',
                             'SNOMED:has_intent',
                             'SNOMED:has_interpretation',
                             'SNOMED:has_laterality',
                             'SNOMED:has_measurement_method',
                             'SNOMED:has_method',
                             'SNOMED:has_priority',
                             'SNOMED:has_procedure_context',
                             'SNOMED:has_process_duration',
                             'SNOMED:has_property',
                             'SNOMED:has_revision_status',
                             'SNOMED:has_scale_type',
                             'SNOMED:has_severity',
                             'SNOMED:has_specimen',
                             'SNOMED:has_state_of_matter',
                             'SNOMED:has_subject_relationship_context',
                             'SNOMED:has_surgical_approach',
                             'SNOMED:has_technique',
                             'SNOMED:has_temporal_context',
                             'SNOMED:has_time_aspect',
                             'SNOMED:has_units',
                             'UMLS:has_structural_class',
                             'UMLS:has_supported_concept_property',
                             'UMLS:has_supported_concept_relationship',
                             'UMLS:may_be_qualified_by'],
         'slot_uri': 'biolink:has_attribute'} })
    deprecated: Optional[bool] = Field(None, description="""A boolean flag indicating that an entity is no longer considered current or valid.""", json_schema_extra = { "linkml_meta": {'alias': 'deprecated',
         'definition_uri': 'https://w3id.org/biolink/vocab/deprecated',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['oboInOwl:ObsoleteClass'],
         'slot_uri': 'biolink:deprecated'} })
    provided_by: Optional[List[str]] = Field(None, description="""The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.""", json_schema_extra = { "linkml_meta": {'alias': 'provided_by',
         'definition_uri': 'https://w3id.org/biolink/vocab/provided_by',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:provided_by'} })
    full_name: Optional[str] = Field(None, description="""a long-form human readable name for a thing""", json_schema_extra = { "linkml_meta": {'alias': 'full_name',
         'definition_uri': 'https://w3id.org/biolink/vocab/full_name',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:full_name'} })
    synonym: Optional[List[str]] = Field(default_factory=list, description="""Alternate human-readable names for a thing""", json_schema_extra = { "linkml_meta": {'alias': 'synonym',
         'aliases': ['alias'],
         'definition_uri': 'https://w3id.org/biolink/vocab/synonym',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'is_a': 'node property',
         'narrow_mappings': ['skos:altLabel',
                             'gff3:Alias',
                             'AGRKB:synonyms',
                             'gpi:DB_Object_Synonyms',
                             'HANCESTRO:0330',
                             'IAO:0000136',
                             'RXNORM:has_tradename'],
         'slot_uri': 'biolink:synonym'} })
    in_taxon: Optional[List[str]] = Field(None, description="""connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'""", json_schema_extra = { "linkml_meta": {'alias': 'in_taxon',
         'aliases': ['instance of',
                     'is organism source of gene product',
                     'organism has gene',
                     'gene found in organism',
                     'gene product has organism source'],
         'definition_uri': 'https://w3id.org/biolink/vocab/in_taxon',
         'domain': 'thing with taxon',
         'domain_of': ['thing with taxon', 'biological entity', 'gene', 'genome'],
         'exact_mappings': ['RO:0002162', 'WIKIDATA_PROPERTY:P703'],
         'in_subset': ['translator_minimal'],
         'inherited': True,
         'is_a': 'related to at instance level',
         'narrow_mappings': ['RO:0002160'],
         'slot_uri': 'biolink:in_taxon'} })
    in_taxon_label: Optional[str] = Field(None, description="""The human readable scientific name for the taxon of the entity.""", json_schema_extra = { "linkml_meta": {'alias': 'in_taxon_label',
         'definition_uri': 'https://w3id.org/biolink/vocab/in_taxon_label',
         'domain': 'thing with taxon',
         'domain_of': ['thing with taxon', 'biological entity', 'gene', 'genome'],
         'exact_mappings': ['WIKIDATA_PROPERTY:P225'],
         'in_subset': ['translator_minimal'],
         'is_a': 'node property',
         'slot_uri': 'biolink:in_taxon_label'} })
    symbol: Optional[str] = Field(None, description="""Symbol for a particular thing""", json_schema_extra = { "linkml_meta": {'alias': 'symbol',
         'definition_uri': 'https://w3id.org/biolink/vocab/symbol',
         'domain': 'named thing',
         'domain_of': ['gene'],
         'exact_mappings': ['AGRKB:symbol', 'gpi:DB_Object_Symbol'],
         'is_a': 'node property',
         'slot_uri': 'biolink:symbol'} })
    xref: Optional[List[str]] = Field(default_factory=list, description="""A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.""", json_schema_extra = { "linkml_meta": {'alias': 'xref',
         'aliases': ['dbxref', 'Dbxref', 'DbXref', 'record_url', 'source_record_urls'],
         'definition_uri': 'https://w3id.org/biolink/vocab/xref',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'gene',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'narrow_mappings': ['gff3:Dbxref', 'gpi:DB_Xrefs'],
         'slot_uri': 'biolink:xref'} })
    has_biological_sequence: Optional[str] = Field(None, description="""connects a genomic feature to its sequence""", json_schema_extra = { "linkml_meta": {'alias': 'has_biological_sequence',
         'definition_uri': 'https://w3id.org/biolink/vocab/has_biological_sequence',
         'domain': 'named thing',
         'domain_of': ['genomic entity', 'gene', 'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:has_biological_sequence'} })

    @field_validator('category')
    def pattern_category(cls, v):
        pattern=re.compile(r"^bican:[A-Z][A-Za-z]+$")
        if isinstance(v,list):
            for element in v:
                if not pattern.match(element):
                    raise ValueError(f"Invalid category format: {element}")
        elif isinstance(v,str):
            if not pattern.match(v):
                raise ValueError(f"Invalid category format: {v}")
        return v


class GenomeAnnotation(Genome):
    """
    Location and nomenclature of genes and all of the coding regions in a genome assembly  and the classification of genes and transcripts into types.
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'from_schema': 'https://identifiers.org/brain-bican/genome-annotation-schema'})

    version: Optional[str] = Field(None, json_schema_extra = { "linkml_meta": {'alias': 'version',
         'broad_mappings': ['pav:version', 'owl:versionInfo'],
         'definition_uri': 'https://w3id.org/biolink/vocab/version',
         'domain': 'dataset',
         'domain_of': ['genome annotation', 'genome assembly'],
         'is_a': 'node property',
         'slot_uri': 'biolink:version'} })
    digest: Optional[List[Union[Checksum, str]]] = Field(default_factory=list, description="""Stores checksum information.""", json_schema_extra = { "linkml_meta": {'alias': 'digest',
         'any_of': [{'range': 'checksum'}, {'range': 'string'}],
         'domain_of': ['genome annotation']} })
    content_url: Optional[List[str]] = Field(default_factory=list, json_schema_extra = { "linkml_meta": {'alias': 'content_url',
         'domain_of': ['genome annotation'],
         'slot_uri': 'schema:url'} })
    authority: Optional[AuthorityType] = Field(None, description="""The organization responsible for publishing the data.""", json_schema_extra = { "linkml_meta": {'alias': 'authority', 'domain_of': ['genome annotation']} })
    reference_assembly: Union[GenomeAssembly, str] = Field(..., description="""The reference genome assembly that this genome annotation was created from.""", json_schema_extra = { "linkml_meta": {'alias': 'reference_assembly',
         'any_of': [{'range': 'genome assembly'}, {'range': 'string'}],
         'domain_of': ['genome annotation']} })
    id: str = Field(..., description="""A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI""", json_schema_extra = { "linkml_meta": {'alias': 'id',
         'definition_uri': 'https://w3id.org/biolink/vocab/id',
         'domain': 'entity',
         'domain_of': ['ontology class',
                       'entity',
                       'attribute',
                       'named thing',
                       'taxonomic rank',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['AGRKB:primaryId', 'gff3:ID', 'gpi:DB_Object_ID'],
         'in_subset': ['translator_minimal'],
         'slot_uri': 'biolink:id'} })
    iri: Optional[str] = Field(None, description="""An IRI for an entity. This is determined by the id using expansion rules.""", json_schema_extra = { "linkml_meta": {'alias': 'iri',
         'definition_uri': 'https://w3id.org/biolink/vocab/iri',
         'domain_of': ['attribute',
                       'entity',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['WIKIDATA_PROPERTY:P854'],
         'in_subset': ['translator_minimal', 'samples'],
         'slot_uri': 'biolink:iri'} })
    category: List[Literal["https://identifiers.org/brain-bican/vocab/GenomeAnnotation","bican:GenomeAnnotation"]] = Field(["bican:GenomeAnnotation"], description="""Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}. NOTE: The category slot was modified to have a curie range and a pattern for bican categories.""", json_schema_extra = { "linkml_meta": {'alias': 'category',
         'definition_uri': 'https://w3id.org/biolink/vocab/category',
         'designates_type': True,
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'is_a': 'type',
         'is_class_field': True,
         'slot_uri': 'biolink:category'} })
    type: Optional[List[str]] = Field(default_factory=list, json_schema_extra = { "linkml_meta": {'alias': 'type',
         'definition_uri': 'https://w3id.org/biolink/vocab/type',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:type', 'gpi:DB_Object_Type'],
         'mappings': ['rdf:type'],
         'slot_uri': 'rdf:type'} })
    name: Optional[str] = Field(None, description="""A human-readable name for an attribute or entity.""", json_schema_extra = { "linkml_meta": {'alias': 'name',
         'aliases': ['label', 'display name', 'title'],
         'definition_uri': 'https://w3id.org/biolink/vocab/name',
         'domain': 'entity',
         'domain_of': ['attribute',
                       'entity',
                       'macromolecular machine mixin',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene or gene product',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:Name', 'gpi:DB_Object_Name'],
         'in_subset': ['translator_minimal', 'samples'],
         'mappings': ['rdfs:label'],
         'narrow_mappings': ['dct:title', 'WIKIDATA_PROPERTY:P1476'],
         'slot_uri': 'rdfs:label'} })
    description: Optional[str] = Field(None, description="""a human-readable description of an entity""", json_schema_extra = { "linkml_meta": {'alias': 'description',
         'aliases': ['definition'],
         'definition_uri': 'https://w3id.org/biolink/vocab/description',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['IAO:0000115', 'skos:definitions'],
         'in_subset': ['translator_minimal'],
         'mappings': ['dct:description'],
         'narrow_mappings': ['gff3:Description'],
         'slot_uri': 'dct:description'} })
    has_attribute: Optional[List[str]] = Field(None, description="""connects any entity to an attribute""", json_schema_extra = { "linkml_meta": {'alias': 'has_attribute',
         'close_mappings': ['OBI:0001927'],
         'definition_uri': 'https://w3id.org/biolink/vocab/has_attribute',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['SIO:000008'],
         'in_subset': ['samples'],
         'narrow_mappings': ['OBAN:association_has_subject_property',
                             'OBAN:association_has_object_property',
                             'CPT:has_possibly_included_panel_element',
                             'DRUGBANK:category',
                             'EFO:is_executed_in',
                             'HANCESTRO:0301',
                             'LOINC:has_action_guidance',
                             'LOINC:has_adjustment',
                             'LOINC:has_aggregation_view',
                             'LOINC:has_approach_guidance',
                             'LOINC:has_divisor',
                             'LOINC:has_exam',
                             'LOINC:has_method',
                             'LOINC:has_modality_subtype',
                             'LOINC:has_object_guidance',
                             'LOINC:has_scale',
                             'LOINC:has_suffix',
                             'LOINC:has_time_aspect',
                             'LOINC:has_time_modifier',
                             'LOINC:has_timing_of',
                             'NCIT:R88',
                             'NCIT:eo_disease_has_property_or_attribute',
                             'NCIT:has_data_element',
                             'NCIT:has_pharmaceutical_administration_method',
                             'NCIT:has_pharmaceutical_basic_dose_form',
                             'NCIT:has_pharmaceutical_intended_site',
                             'NCIT:has_pharmaceutical_release_characteristics',
                             'NCIT:has_pharmaceutical_state_of_matter',
                             'NCIT:has_pharmaceutical_transformation',
                             'NCIT:is_qualified_by',
                             'NCIT:qualifier_applies_to',
                             'NCIT:role_has_domain',
                             'NCIT:role_has_range',
                             'INO:0000154',
                             'HANCESTRO:0308',
                             'OMIM:has_inheritance_type',
                             'orphanet:C016',
                             'orphanet:C017',
                             'RO:0000053',
                             'RO:0000086',
                             'RO:0000087',
                             'SNOMED:has_access',
                             'SNOMED:has_clinical_course',
                             'SNOMED:has_count_of_base_of_active_ingredient',
                             'SNOMED:has_dose_form_administration_method',
                             'SNOMED:has_dose_form_release_characteristic',
                             'SNOMED:has_dose_form_transformation',
                             'SNOMED:has_finding_context',
                             'SNOMED:has_finding_informer',
                             'SNOMED:has_inherent_attribute',
                             'SNOMED:has_intent',
                             'SNOMED:has_interpretation',
                             'SNOMED:has_laterality',
                             'SNOMED:has_measurement_method',
                             'SNOMED:has_method',
                             'SNOMED:has_priority',
                             'SNOMED:has_procedure_context',
                             'SNOMED:has_process_duration',
                             'SNOMED:has_property',
                             'SNOMED:has_revision_status',
                             'SNOMED:has_scale_type',
                             'SNOMED:has_severity',
                             'SNOMED:has_specimen',
                             'SNOMED:has_state_of_matter',
                             'SNOMED:has_subject_relationship_context',
                             'SNOMED:has_surgical_approach',
                             'SNOMED:has_technique',
                             'SNOMED:has_temporal_context',
                             'SNOMED:has_time_aspect',
                             'SNOMED:has_units',
                             'UMLS:has_structural_class',
                             'UMLS:has_supported_concept_property',
                             'UMLS:has_supported_concept_relationship',
                             'UMLS:may_be_qualified_by'],
         'slot_uri': 'biolink:has_attribute'} })
    deprecated: Optional[bool] = Field(None, description="""A boolean flag indicating that an entity is no longer considered current or valid.""", json_schema_extra = { "linkml_meta": {'alias': 'deprecated',
         'definition_uri': 'https://w3id.org/biolink/vocab/deprecated',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['oboInOwl:ObsoleteClass'],
         'slot_uri': 'biolink:deprecated'} })
    provided_by: Optional[List[str]] = Field(None, description="""The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.""", json_schema_extra = { "linkml_meta": {'alias': 'provided_by',
         'definition_uri': 'https://w3id.org/biolink/vocab/provided_by',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:provided_by'} })
    xref: Optional[List[str]] = Field(default_factory=list, description="""A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.""", json_schema_extra = { "linkml_meta": {'alias': 'xref',
         'aliases': ['dbxref', 'Dbxref', 'DbXref', 'record_url', 'source_record_urls'],
         'definition_uri': 'https://w3id.org/biolink/vocab/xref',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'gene',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'narrow_mappings': ['gff3:Dbxref', 'gpi:DB_Xrefs'],
         'slot_uri': 'biolink:xref'} })
    full_name: Optional[str] = Field(None, description="""a long-form human readable name for a thing""", json_schema_extra = { "linkml_meta": {'alias': 'full_name',
         'definition_uri': 'https://w3id.org/biolink/vocab/full_name',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:full_name'} })
    synonym: Optional[List[str]] = Field(default_factory=list, description="""Alternate human-readable names for a thing""", json_schema_extra = { "linkml_meta": {'alias': 'synonym',
         'aliases': ['alias'],
         'definition_uri': 'https://w3id.org/biolink/vocab/synonym',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'is_a': 'node property',
         'narrow_mappings': ['skos:altLabel',
                             'gff3:Alias',
                             'AGRKB:synonyms',
                             'gpi:DB_Object_Synonyms',
                             'HANCESTRO:0330',
                             'IAO:0000136',
                             'RXNORM:has_tradename'],
         'slot_uri': 'biolink:synonym'} })
    in_taxon: Optional[List[str]] = Field(None, description="""connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'""", json_schema_extra = { "linkml_meta": {'alias': 'in_taxon',
         'aliases': ['instance of',
                     'is organism source of gene product',
                     'organism has gene',
                     'gene found in organism',
                     'gene product has organism source'],
         'definition_uri': 'https://w3id.org/biolink/vocab/in_taxon',
         'domain': 'thing with taxon',
         'domain_of': ['thing with taxon', 'biological entity', 'gene', 'genome'],
         'exact_mappings': ['RO:0002162', 'WIKIDATA_PROPERTY:P703'],
         'in_subset': ['translator_minimal'],
         'inherited': True,
         'is_a': 'related to at instance level',
         'narrow_mappings': ['RO:0002160'],
         'slot_uri': 'biolink:in_taxon'} })
    in_taxon_label: Optional[str] = Field(None, description="""The human readable scientific name for the taxon of the entity.""", json_schema_extra = { "linkml_meta": {'alias': 'in_taxon_label',
         'definition_uri': 'https://w3id.org/biolink/vocab/in_taxon_label',
         'domain': 'thing with taxon',
         'domain_of': ['thing with taxon', 'biological entity', 'gene', 'genome'],
         'exact_mappings': ['WIKIDATA_PROPERTY:P225'],
         'in_subset': ['translator_minimal'],
         'is_a': 'node property',
         'slot_uri': 'biolink:in_taxon_label'} })
    has_biological_sequence: Optional[str] = Field(None, description="""connects a genomic feature to its sequence""", json_schema_extra = { "linkml_meta": {'alias': 'has_biological_sequence',
         'definition_uri': 'https://w3id.org/biolink/vocab/has_biological_sequence',
         'domain': 'named thing',
         'domain_of': ['genomic entity', 'gene', 'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:has_biological_sequence'} })

    @field_validator('category')
    def pattern_category(cls, v):
        pattern=re.compile(r"^bican:[A-Z][A-Za-z]+$")
        if isinstance(v,list):
            for element in v:
                if not pattern.match(element):
                    raise ValueError(f"Invalid category format: {element}")
        elif isinstance(v,str):
            if not pattern.match(v):
                raise ValueError(f"Invalid category format: {v}")
        return v


class GenomeAssembly(ThingWithTaxon, NamedThing):
    """
    Genome assembly to contain version and label information
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'from_schema': 'https://identifiers.org/brain-bican/genome-annotation-schema',
         'mixins': ['ThingWithTaxon']})

    version: Optional[str] = Field(None, json_schema_extra = { "linkml_meta": {'alias': 'version',
         'broad_mappings': ['pav:version', 'owl:versionInfo'],
         'definition_uri': 'https://w3id.org/biolink/vocab/version',
         'domain': 'dataset',
         'domain_of': ['genome annotation', 'genome assembly'],
         'is_a': 'node property',
         'slot_uri': 'biolink:version'} })
    strain: Optional[str] = Field(None, description="""The genetic variant or subtype of a species or organism.""", json_schema_extra = { "linkml_meta": {'alias': 'strain', 'domain_of': ['genome assembly']} })
    in_taxon: Optional[List[str]] = Field(None, description="""connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'""", json_schema_extra = { "linkml_meta": {'alias': 'in_taxon',
         'aliases': ['instance of',
                     'is organism source of gene product',
                     'organism has gene',
                     'gene found in organism',
                     'gene product has organism source'],
         'definition_uri': 'https://w3id.org/biolink/vocab/in_taxon',
         'domain': 'thing with taxon',
         'domain_of': ['thing with taxon', 'biological entity', 'gene', 'genome'],
         'exact_mappings': ['RO:0002162', 'WIKIDATA_PROPERTY:P703'],
         'in_subset': ['translator_minimal'],
         'inherited': True,
         'is_a': 'related to at instance level',
         'narrow_mappings': ['RO:0002160'],
         'slot_uri': 'biolink:in_taxon'} })
    in_taxon_label: Optional[str] = Field(None, description="""The human readable scientific name for the taxon of the entity.""", json_schema_extra = { "linkml_meta": {'alias': 'in_taxon_label',
         'definition_uri': 'https://w3id.org/biolink/vocab/in_taxon_label',
         'domain': 'thing with taxon',
         'domain_of': ['thing with taxon', 'biological entity', 'gene', 'genome'],
         'exact_mappings': ['WIKIDATA_PROPERTY:P225'],
         'in_subset': ['translator_minimal'],
         'is_a': 'node property',
         'slot_uri': 'biolink:in_taxon_label'} })
    id: str = Field(..., description="""A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI""", json_schema_extra = { "linkml_meta": {'alias': 'id',
         'definition_uri': 'https://w3id.org/biolink/vocab/id',
         'domain': 'entity',
         'domain_of': ['ontology class',
                       'entity',
                       'attribute',
                       'named thing',
                       'taxonomic rank',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['AGRKB:primaryId', 'gff3:ID', 'gpi:DB_Object_ID'],
         'in_subset': ['translator_minimal'],
         'slot_uri': 'biolink:id'} })
    iri: Optional[str] = Field(None, description="""An IRI for an entity. This is determined by the id using expansion rules.""", json_schema_extra = { "linkml_meta": {'alias': 'iri',
         'definition_uri': 'https://w3id.org/biolink/vocab/iri',
         'domain_of': ['attribute',
                       'entity',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['WIKIDATA_PROPERTY:P854'],
         'in_subset': ['translator_minimal', 'samples'],
         'slot_uri': 'biolink:iri'} })
    category: List[Literal["https://identifiers.org/brain-bican/vocab/GenomeAssembly","bican:GenomeAssembly"]] = Field(["bican:GenomeAssembly"], description="""Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the biolink entity type class. In a neo4j database this MAY correspond to the neo4j label tag. In an RDF database it should be a biolink model class URI. This field is multi-valued. It should include values for ancestors of the biolink class; for example, a protein such as Shh would have category values `biolink:Protein`, `biolink:GeneProduct`, `biolink:MolecularEntity`. In an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific biolink class, or potentially to a class more specific than something in biolink. For example, a sequence feature `f` may have a rdf:type assertion to a SO class such as TF_binding_site, which is more specific than anything in biolink. Here we would have categories {biolink:GenomicEntity, biolink:MolecularEntity, biolink:NamedThing}. NOTE: The category slot was modified to have a curie range and a pattern for bican categories.""", json_schema_extra = { "linkml_meta": {'alias': 'category',
         'definition_uri': 'https://w3id.org/biolink/vocab/category',
         'designates_type': True,
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'is_a': 'type',
         'is_class_field': True,
         'slot_uri': 'biolink:category'} })
    type: Optional[List[str]] = Field(default_factory=list, json_schema_extra = { "linkml_meta": {'alias': 'type',
         'definition_uri': 'https://w3id.org/biolink/vocab/type',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:type', 'gpi:DB_Object_Type'],
         'mappings': ['rdf:type'],
         'slot_uri': 'rdf:type'} })
    name: Optional[str] = Field(None, description="""A human-readable name for an attribute or entity.""", json_schema_extra = { "linkml_meta": {'alias': 'name',
         'aliases': ['label', 'display name', 'title'],
         'definition_uri': 'https://w3id.org/biolink/vocab/name',
         'domain': 'entity',
         'domain_of': ['attribute',
                       'entity',
                       'macromolecular machine mixin',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene or gene product',
                       'gene',
                       'genome'],
         'exact_mappings': ['gff3:Name', 'gpi:DB_Object_Name'],
         'in_subset': ['translator_minimal', 'samples'],
         'mappings': ['rdfs:label'],
         'narrow_mappings': ['dct:title', 'WIKIDATA_PROPERTY:P1476'],
         'slot_uri': 'rdfs:label'} })
    description: Optional[str] = Field(None, description="""a human-readable description of an entity""", json_schema_extra = { "linkml_meta": {'alias': 'description',
         'aliases': ['definition'],
         'definition_uri': 'https://w3id.org/biolink/vocab/description',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['IAO:0000115', 'skos:definitions'],
         'in_subset': ['translator_minimal'],
         'mappings': ['dct:description'],
         'narrow_mappings': ['gff3:Description'],
         'slot_uri': 'dct:description'} })
    has_attribute: Optional[List[str]] = Field(None, description="""connects any entity to an attribute""", json_schema_extra = { "linkml_meta": {'alias': 'has_attribute',
         'close_mappings': ['OBI:0001927'],
         'definition_uri': 'https://w3id.org/biolink/vocab/has_attribute',
         'domain': 'entity',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['SIO:000008'],
         'in_subset': ['samples'],
         'narrow_mappings': ['OBAN:association_has_subject_property',
                             'OBAN:association_has_object_property',
                             'CPT:has_possibly_included_panel_element',
                             'DRUGBANK:category',
                             'EFO:is_executed_in',
                             'HANCESTRO:0301',
                             'LOINC:has_action_guidance',
                             'LOINC:has_adjustment',
                             'LOINC:has_aggregation_view',
                             'LOINC:has_approach_guidance',
                             'LOINC:has_divisor',
                             'LOINC:has_exam',
                             'LOINC:has_method',
                             'LOINC:has_modality_subtype',
                             'LOINC:has_object_guidance',
                             'LOINC:has_scale',
                             'LOINC:has_suffix',
                             'LOINC:has_time_aspect',
                             'LOINC:has_time_modifier',
                             'LOINC:has_timing_of',
                             'NCIT:R88',
                             'NCIT:eo_disease_has_property_or_attribute',
                             'NCIT:has_data_element',
                             'NCIT:has_pharmaceutical_administration_method',
                             'NCIT:has_pharmaceutical_basic_dose_form',
                             'NCIT:has_pharmaceutical_intended_site',
                             'NCIT:has_pharmaceutical_release_characteristics',
                             'NCIT:has_pharmaceutical_state_of_matter',
                             'NCIT:has_pharmaceutical_transformation',
                             'NCIT:is_qualified_by',
                             'NCIT:qualifier_applies_to',
                             'NCIT:role_has_domain',
                             'NCIT:role_has_range',
                             'INO:0000154',
                             'HANCESTRO:0308',
                             'OMIM:has_inheritance_type',
                             'orphanet:C016',
                             'orphanet:C017',
                             'RO:0000053',
                             'RO:0000086',
                             'RO:0000087',
                             'SNOMED:has_access',
                             'SNOMED:has_clinical_course',
                             'SNOMED:has_count_of_base_of_active_ingredient',
                             'SNOMED:has_dose_form_administration_method',
                             'SNOMED:has_dose_form_release_characteristic',
                             'SNOMED:has_dose_form_transformation',
                             'SNOMED:has_finding_context',
                             'SNOMED:has_finding_informer',
                             'SNOMED:has_inherent_attribute',
                             'SNOMED:has_intent',
                             'SNOMED:has_interpretation',
                             'SNOMED:has_laterality',
                             'SNOMED:has_measurement_method',
                             'SNOMED:has_method',
                             'SNOMED:has_priority',
                             'SNOMED:has_procedure_context',
                             'SNOMED:has_process_duration',
                             'SNOMED:has_property',
                             'SNOMED:has_revision_status',
                             'SNOMED:has_scale_type',
                             'SNOMED:has_severity',
                             'SNOMED:has_specimen',
                             'SNOMED:has_state_of_matter',
                             'SNOMED:has_subject_relationship_context',
                             'SNOMED:has_surgical_approach',
                             'SNOMED:has_technique',
                             'SNOMED:has_temporal_context',
                             'SNOMED:has_time_aspect',
                             'SNOMED:has_units',
                             'UMLS:has_structural_class',
                             'UMLS:has_supported_concept_property',
                             'UMLS:has_supported_concept_relationship',
                             'UMLS:may_be_qualified_by'],
         'slot_uri': 'biolink:has_attribute'} })
    deprecated: Optional[bool] = Field(None, description="""A boolean flag indicating that an entity is no longer considered current or valid.""", json_schema_extra = { "linkml_meta": {'alias': 'deprecated',
         'definition_uri': 'https://w3id.org/biolink/vocab/deprecated',
         'domain_of': ['entity',
                       'attribute',
                       'named thing',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'exact_mappings': ['oboInOwl:ObsoleteClass'],
         'slot_uri': 'biolink:deprecated'} })
    provided_by: Optional[List[str]] = Field(None, description="""The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.""", json_schema_extra = { "linkml_meta": {'alias': 'provided_by',
         'definition_uri': 'https://w3id.org/biolink/vocab/provided_by',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:provided_by'} })
    xref: Optional[List[str]] = Field(default_factory=list, description="""A database cross reference or alternative identifier for a NamedThing or edge between two NamedThings.  This property should point to a database record or webpage that supports the existence of the edge, or gives more detail about the edge. This property can be used on a node or edge to provide multiple URIs or CURIE cross references.""", json_schema_extra = { "linkml_meta": {'alias': 'xref',
         'aliases': ['dbxref', 'Dbxref', 'DbXref', 'record_url', 'source_record_urls'],
         'definition_uri': 'https://w3id.org/biolink/vocab/xref',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'gene',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'narrow_mappings': ['gff3:Dbxref', 'gpi:DB_Xrefs'],
         'slot_uri': 'biolink:xref'} })
    full_name: Optional[str] = Field(None, description="""a long-form human readable name for a thing""", json_schema_extra = { "linkml_meta": {'alias': 'full_name',
         'definition_uri': 'https://w3id.org/biolink/vocab/full_name',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'is_a': 'node property',
         'slot_uri': 'biolink:full_name'} })
    synonym: Optional[List[str]] = Field(default_factory=list, description="""Alternate human-readable names for a thing""", json_schema_extra = { "linkml_meta": {'alias': 'synonym',
         'aliases': ['alias'],
         'definition_uri': 'https://w3id.org/biolink/vocab/synonym',
         'domain': 'named thing',
         'domain_of': ['named thing',
                       'attribute',
                       'organism taxon',
                       'information content entity',
                       'dataset',
                       'physical entity',
                       'activity',
                       'procedure',
                       'material sample',
                       'biological entity',
                       'gene',
                       'genome'],
         'in_subset': ['translator_minimal'],
         'is_a': 'node property',
         'narrow_mappings': ['skos:altLabel',
                             'gff3:Alias',
                             'AGRKB:synonyms',
                             'gpi:DB_Object_Synonyms',
                             'HANCESTRO:0330',
                             'IAO:0000136',
                             'RXNORM:has_tradename'],
         'slot_uri': 'biolink:synonym'} })

    @field_validator('category')
    def pattern_category(cls, v):
        pattern=re.compile(r"^bican:[A-Z][A-Za-z]+$")
        if isinstance(v,list):
            for element in v:
                if not pattern.match(element):
                    raise ValueError(f"Invalid category format: {element}")
        elif isinstance(v,str):
            if not pattern.match(v):
                raise ValueError(f"Invalid category format: {v}")
        return v


class AnnotationCollection(ConfiguredBaseModel):
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'from_schema': 'https://identifiers.org/brain-bican/genome-annotation-schema',
         'tree_root': True})

    annotations: Optional[List[GeneAnnotation]] = Field(default_factory=list, json_schema_extra = { "linkml_meta": {'alias': 'annotations', 'domain_of': ['annotation collection']} })
    genome_annotations: Optional[List[GenomeAnnotation]] = Field(default_factory=list, json_schema_extra = { "linkml_meta": {'alias': 'genome_annotations', 'domain_of': ['annotation collection']} })
    genome_assemblies: Optional[List[GenomeAssembly]] = Field(default_factory=list, json_schema_extra = { "linkml_meta": {'alias': 'genome_assemblies', 'domain_of': ['annotation collection']} })


# Model rebuild
# see https://pydantic-docs.helpmanual.io/usage/models/#rebuilding-a-model
OntologyClass.model_rebuild()
Annotation.model_rebuild()
QuantityValue.model_rebuild()
Entity.model_rebuild()
NamedThing.model_rebuild()
Attribute.model_rebuild()
TaxonomicRank.model_rebuild()
OrganismTaxon.model_rebuild()
InformationContentEntity.model_rebuild()
Dataset.model_rebuild()
PhysicalEssenceOrOccurrent.model_rebuild()
PhysicalEssence.model_rebuild()
PhysicalEntity.model_rebuild()
Occurrent.model_rebuild()
ActivityAndBehavior.model_rebuild()
Activity.model_rebuild()
Procedure.model_rebuild()
SubjectOfInvestigation.model_rebuild()
MaterialSample.model_rebuild()
ThingWithTaxon.model_rebuild()
BiologicalEntity.model_rebuild()
GenomicEntity.model_rebuild()
ChemicalEntityOrGeneOrGeneProduct.model_rebuild()
MacromolecularMachineMixin.model_rebuild()
GeneOrGeneProduct.model_rebuild()
Gene.model_rebuild()
Genome.model_rebuild()
Checksum.model_rebuild()
GeneAnnotation.model_rebuild()
GenomeAnnotation.model_rebuild()
GenomeAssembly.model_rebuild()
AnnotationCollection.model_rebuild()

